#!/usr/bin/env node
// Script para actualizar System Prompt con instrucciones de memoria a largo plazo

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Cargar variables de entorno
const envPath = resolve(__dirname, '../.env.local');
const envContent = readFileSync(envPath, 'utf-8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const match = line.match(/^([^=]+)=(.*)$/);
  if (match) {
    envVars[match[1].trim()] = match[2].trim().replace(/^["']|["']$/g, '');
  }
});

const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: Variables de entorno no encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üìù Actualizando System Prompt para habilitar memoria a largo plazo...\n');

try {
  // Leer System Prompt actual
  const { data: currentPrompt, error: readError } = await supabase
    .from('system_prompts')
    .select('*')
    .eq('name', 'nexus_main')
    .single();

  if (readError) {
    console.error('‚ùå Error al leer System Prompt:', readError);
    process.exit(1);
  }

  console.log('‚úÖ System Prompt actual le√≠do');
  console.log(`   Versi√≥n: ${currentPrompt.version}`);
  console.log(`   Longitud: ${currentPrompt.prompt?.length || 0} caracteres\n`);

  // Nuevo contenido a agregar
  const memoryInstructions = `

---

## üß† MEMORIA A LARGO PLAZO (CR√çTICO)

‚ö†Ô∏è INSTRUCCI√ìN FUNDAMENTAL: NEXUS TIENE MEMORIA COMPLETA de conversaciones previas.

### C√ìMO FUNCIONA TU MEMORIA:

El sistema carga autom√°ticamente el historial de conversaciones previas con cada usuario (identificado por fingerprint √∫nico). Recibes hasta 40 mensajes hist√≥ricos (20 intercambios) de conversaciones anteriores.

### REGLAS DE USO DE MEMORIA:

**‚úÖ DEBES:**
- Recordar datos ya compartidos (nombre, arquetipo, WhatsApp)
- Hacer referencia a conversaciones previas cuando sea relevante
- Personalizar respuestas bas√°ndote en contexto hist√≥rico
- Reconocer cuando el usuario vuelve despu√©s de d√≠as/semanas

**‚ùå NUNCA:**
- Decir "No tengo acceso al historial"
- Decir "Cada sesi√≥n comienza desde cero"
- Decir "Para proteger tu privacidad no recuerdo"
- Pedir datos que ya capturaste en conversaciones previas

### EJEMPLOS DE USO CORRECTO:

**Usuario pregunta: "¬øRecuerdas de qu√© hablamos antes?"**

INCORRECTO ‚ùå:
"No tengo acceso al historial de conversaciones anteriores."

CORRECTO ‚úÖ:
"Claro [NOMBRE], la √∫ltima vez hablamos sobre [tema espec√≠fico del historial].
¬øQuieres profundizar en eso o tienes otra pregunta?"

**Usuario pregunta sobre productos despu√©s de d√≠as:**

INCORRECTO ‚ùå:
"Para personalizar tu asesor√≠a, ¬øc√≥mo te llamas?"

CORRECTO ‚úÖ:
"[NOMBRE], la √∫ltima vez te interesaban los productos de [categor√≠a].
¬øQuieres que profundicemos en esos o ver otras opciones?"

### PRIVACY & TRANSPARENCY:

Tu memoria es PRIVADA por usuario. Cada conversaci√≥n est√° aislada por fingerprint - nunca compartes datos entre usuarios.

Si el usuario pregunta sobre privacidad:
- Explicar que su historial es SOLO suyo (no compartido)
- Datos almacenados en Supabase con RLS (Row-Level Security)
- Puede solicitar borrado completo contactando soporte

### VERIFICACI√ìN DE MEMORIA:

Si el historial viene vac√≠o (primera conversaci√≥n del usuario):
- NO menciones que "no tienes memoria"
- Simplemente procede con captura normal
- Es su primera vez, no falta de memoria

Si el historial tiene datos:
- USA esa informaci√≥n para personalizar
- Evita re-preguntar datos ya capturados
- Reconoce contexto de conversaciones previas

---
`;

  // Insertar nueva secci√≥n ANTES de "## INSTRUCCIONES TECNICAS"
  let updatedPrompt = currentPrompt.prompt;

  const insertionPoint = updatedPrompt.indexOf('## INSTRUCCIONES TECNICAS');

  if (insertionPoint === -1) {
    console.error('‚ùå No se encontr√≥ secci√≥n "## INSTRUCCIONES TECNICAS"');
    console.log('‚ö†Ô∏è  Agregando al final del prompt...');
    updatedPrompt = updatedPrompt + memoryInstructions;
  } else {
    updatedPrompt =
      updatedPrompt.slice(0, insertionPoint) +
      memoryInstructions +
      '\n' +
      updatedPrompt.slice(insertionPoint);
  }

  console.log('‚úÖ Nueva secci√≥n de memoria agregada');
  console.log(`   Nueva longitud: ${updatedPrompt.length} caracteres\n`);

  // Actualizar versi√≥n
  const newVersion = 'v12.11_memoria_largo_plazo';

  // Guardar en Supabase
  const { error: updateError } = await supabase
    .from('system_prompts')
    .update({
      prompt: updatedPrompt,
      version: newVersion,
      updated_at: new Date().toISOString()
    })
    .eq('name', 'nexus_main');

  if (updateError) {
    console.error('‚ùå Error al actualizar System Prompt:', updateError);
    process.exit(1);
  }

  console.log('‚îÅ'.repeat(80));
  console.log('‚úÖ SYSTEM PROMPT ACTUALIZADO EXITOSAMENTE');
  console.log('‚îÅ'.repeat(80));
  console.log(`üìå Nueva versi√≥n: ${newVersion}`);
  console.log(`üìå Longitud total: ${updatedPrompt.length} caracteres`);
  console.log(`üìå Cambios: Agregada secci√≥n "üß† MEMORIA A LARGO PLAZO"`);
  console.log('‚îÅ'.repeat(80));
  console.log('\n‚ö†Ô∏è  IMPORTANTE:');
  console.log('   - Cache de Anthropic tomar√° ~5 minutos en refrescar');
  console.log('   - Prueba NEXUS despu√©s de 5 minutos');
  console.log('   - Verifica que NO diga "no tengo acceso al historial"');
  console.log('\n‚úÖ Script completado exitosamente');

} catch (err) {
  console.error('‚ùå Error inesperado:', err);
  process.exit(1);
}
