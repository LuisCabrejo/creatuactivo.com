// src/app/api/nexus/route.ts
// API Route NEXUS - ARQUITECTURA H√çBRIDA ESCALABLE CORREGIDA
// ARSENAL: 79 respuestas en 3 documentos con b√∫squeda adaptativa
// IDENTIDAD: Copiloto del Arquitecto (atemporal, sin versiones)
// CORRECCIONES: System prompt sin cache + Clasificaci√≥n productos/paquetes + Consulta cat√°logo
// FIX APLICADO: Instrucciones espec√≠ficas para interpretaci√≥n correcta del cat√°logo

import { createClient } from '@supabase/supabase-js';
import Anthropic from '@anthropic-ai/sdk';
import { AnthropicStream, StreamingTextResponse } from 'ai';

// 1. Configuraci√≥n de Clientes
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export const runtime = 'edge';
export const maxDuration = 30; // ‚úÖ OPTIMIZACI√ìN v11.9: 25‚Üí30s buffer para requests pesados

// Cache en memoria optimizado para arquitectura h√≠brida
const searchCache = new Map<string, any>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutos
// ‚úÖ OPTIMIZACI√ìN v11.9: System prompt CON cache para reducir latencia
const systemPromptCache = new Map<string, any>();
const SYSTEM_PROMPT_CACHE_TTL = 5 * 60 * 1000; // 5 minutos (sincronizado con searchCache)

const API_VERSION = 'v11.9_cap_temprana_optimizada';

// ========================================
// FRAMEWORK IAA - CAPTURA INTELIGENTE
// ========================================
interface ProspectData {
  name?: string;
  email?: string;
  phone?: string;
  occupation?: string;
  interest_level?: number;
  objections?: string[];
  archetype?: string;
  momento_optimo?: string;
  preguntas?: string[];
}

// Funci√≥n para capturar datos del prospecto inteligentemente
async function captureProspectData(
  message: string,
  sessionId: string,
  fingerprint?: string
): Promise<ProspectData> {

  console.log('üîç [NEXUS] Captura datos h√≠brida - Input:', {
    message: message.substring(0, 100),
    sessionId,
    fingerprint,
    hasFingerprint: !!fingerprint
  });

  const data: ProspectData = {};
  const messageLower = message.toLowerCase();

  // CAPTURA DE NOMBRE
  const namePatterns = [
    /(?:me llamo|mi nombre es|soy)\s+([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)?)/i,
    /^([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)?)\s*$/
  ];

  for (const pattern of namePatterns) {
    const match = message.match(pattern);
    if (match) {
      data.name = match[1].trim();
      console.log('‚úÖ [NEXUS] Nombre capturado:', data.name, 'del mensaje:', message.substring(0, 50));
      break;
    }
  }

  if (!data.name && message.length < 30) {
    // Intento adicional: nombre simple sin patr√≥n estricto
    const simpleNameMatch = message.match(/^([A-Z√Ä-√øa-z√†-√ø]+(?:\s+[A-Z√Ä-√øa-z√†-√ø]+)?)\s*$/i);
    if (simpleNameMatch && !messageLower.match(/hola|gracias|si|no|ok|bien/)) {
      data.name = simpleNameMatch[1].trim();
      console.log('‚úÖ [NEXUS] Nombre capturado (patr√≥n simple):', data.name);
    }
  }

  // CAPTURA DE TEL√âFONO
  const phoneMatch = message.match(/(?:\+?57)?\s*(\d{10})/);
  if (phoneMatch) {
    data.phone = phoneMatch[0].replace(/\s/g, '');
    console.log('Tel√©fono capturado:', data.phone);
  }

  // CAPTURA DE EMAIL
  const emailMatch = message.match(/[\w.-]+@[\w.-]+\.\w+/);
  if (emailMatch) {
    data.email = emailMatch[0].toLowerCase();
    console.log('Email capturado:', data.email);
  }

  // CAPTURA DE OCUPACI√ìN
  const occupationPatterns = [
    /(?:soy|trabajo como|me dedico a|trabajo en)\s+(.+?)(?:\.|,|$)/i,
    /(?:profesi√≥n|ocupaci√≥n):\s*(.+?)(?:\.|,|$)/i
  ];

  for (const pattern of occupationPatterns) {
    const match = message.match(pattern);
    if (match) {
      data.occupation = match[1].trim();
      console.log('Ocupaci√≥n capturada:', data.occupation);
      break;
    }
  }

  // C√ÅLCULO DE NIVEL DE INTER√âS (H√çBRIDO MEJORADO)
  let nivelInteres = 5; // Base neutral

  // ‚úÖ NUEVO: Compartir datos personales = alta calificaci√≥n
  if (data.name) nivelInteres += 2;
  if (data.phone) nivelInteres += 3; // WhatsApp es el indicador m√°s fuerte
  if (data.email) nivelInteres += 1.5;
  if (data.occupation) nivelInteres += 1;

  // Indicadores positivos (palabras clave)
  if (messageLower.includes('paquete') || messageLower.includes('inversi√≥n')) nivelInteres += 2;
  if (messageLower.includes('empezar') || messageLower.includes('comenzar')) nivelInteres += 3;
  if (messageLower.includes('precio') || messageLower.includes('costo') || messageLower.includes('cu√°nto')) nivelInteres += 1.5;
  if (messageLower.includes('quiero') || messageLower.includes('necesito') || messageLower.includes('me interesa')) nivelInteres += 2;
  if (messageLower.includes('cu√°ndo') || messageLower.includes('cuando') || messageLower.includes('c√≥mo')) nivelInteres += 1;

  // Indicadores negativos (menos agresivos)
  if (messageLower.includes('no me interesa') || messageLower.includes('no gracias')) nivelInteres -= 3;
  if (messageLower.includes('tal vez') || messageLower.includes('quiz√°s')) nivelInteres -= 0.5;
  if (messageLower.includes('duda')) nivelInteres -= 0.5;

  data.interest_level = Math.min(10, Math.max(0, nivelInteres));
  console.log('üìä [NEXUS] Nivel de inter√©s calculado:', data.interest_level, {
    tiene_nombre: !!data.name,
    tiene_telefono: !!data.phone,
    tiene_email: !!data.email,
    tiene_ocupacion: !!data.occupation,
    momento_optimo: data.interest_level >= 7 ? 'caliente' : data.interest_level >= 4 ? 'tibio' : 'frio'
  });

  // DETECCI√ìN DE OBJECIONES (SEM√ÅNTICA)
  const objeciones: string[] = [];

  if (messageLower.includes('caro') || messageLower.includes('mucho dinero') ||
      messageLower.includes('no tengo dinero')) {
    objeciones.push('precio');
  }

  if (messageLower.includes('tiempo') || messageLower.includes('ocupado') ||
      messageLower.includes('no puedo')) {
    objeciones.push('tiempo');
  }

  if (messageLower.includes('mlm') || messageLower.includes('pir√°mide') ||
      messageLower.includes('multinivel')) {
    objeciones.push('mlm');
  }

  if (messageLower.includes('estafa') || messageLower.includes('real') ||
      messageLower.includes('confianza')) {
    objeciones.push('confianza');
  }

  if (objeciones.length > 0) {
    data.objections = objeciones;
    console.log('Objeciones detectadas:', objeciones);
  }

  // DETECCI√ìN DE ARQUETIPO (ESCALABLE)
  if (messageLower.includes('empresa') || messageLower.includes('negocio')) {
    data.archetype = 'emprendedor_dueno_negocio';
  } else if (messageLower.includes('trabajo') || messageLower.includes('empleado')) {
    data.archetype = 'profesional_vision';
  } else if (messageLower.includes('familia') || messageLower.includes('hijos')) {
    data.archetype = 'lider_hogar';
  } else if (messageLower.includes('estudiante') || messageLower.includes('universidad')) {
    data.archetype = 'joven_ambicion';
  }

  if (data.archetype) {
    console.log('Arquetipo detectado:', data.archetype);
  }

  // DETERMINAR MOMENTO √ìPTIMO
  if (data.interest_level >= 7) {
    data.momento_optimo = 'caliente';
  } else if (data.interest_level >= 4) {
    data.momento_optimo = 'tibio';
  } else {
    data.momento_optimo = 'frio';
  }

  // GUARDAR EN SUPABASE SI HAY DATOS
  if (Object.keys(data).length > 0 && fingerprint) {
    try {
      console.log('üîµ [NEXUS] Guardando en BD:', { fingerprint, data });

      const { data: rpcResult, error: rpcError } = await supabase.rpc('update_prospect_data', {
        p_fingerprint_id: fingerprint,
        p_data: data
      });

      if (rpcError) {
        console.error('‚ùå [NEXUS] Error RPC update_prospect_data:', rpcError);
        throw rpcError;
      }

      console.log('‚úÖ [NEXUS] Datos guardados exitosamente:', rpcResult);
    } catch (error) {
      console.error('‚ùå [NEXUS] Error guardando datos del prospecto:', error);
      // No propagar el error para no romper la conversaci√≥n
    }
  } else {
    console.warn('‚ö†Ô∏è [NEXUS] No se guardaron datos:', {
      tieneFingerprint: !!fingerprint,
      fingerprintValue: fingerprint || 'undefined',
      cantidadDatos: Object.keys(data).length,
      datosCapturados: data,
      motivo: !fingerprint ? 'Sin fingerprint' : 'Sin datos capturados'
    });
  }

  return data;
}

// FUNCI√ìN ACTUALIZADA: clasificarDocumentoHibrido() con EXPANSI√ìN SEM√ÅNTICA COMPLETA
// Para reconocer TODAS las variaciones de "¬øC√≥mo funciona el negocio?"

function clasificarDocumentoHibrido(userMessage: string): string | null {
  const messageLower = userMessage.toLowerCase();

  // üîß NUEVA CLASIFICACI√ìN ROBUSTA: PRODUCTOS INDIVIDUALES (CAT√ÅLOGO) - SIN CAMBIOS
  const patrones_productos = [
    // ===== C√ÅPSULAS CORDYGOLD (PROBLEMA ESPEC√çFICO) =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:cordy gold|cordygold|cordy|gano cordyceps)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*cordyceps/i,

    // ===== GANO CAF√â VARIACIONES =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:gano.*caf√©|ganocaf√©|caf√©.*3.*en.*1|capuchino)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:caf√©.*negro|caf√©.*cl√°sico|negrito)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:latte.*rico|mocha.*rico|shoko.*rico)/i,

    // ===== C√ÅPSULAS SUPLEMENTOS =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:c√°psulas.*ganoderma|ganoderma.*lucidum)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*excellium/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:c√°psula|suplemento)/i,

    // ===== L√çNEA LUVOCO =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:m√°quina.*luvoco|luvoco)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:c√°psulas.*luvoco|luvoco.*c√°psulas)/i,

    // ===== PRODUCTOS ESPEC√çFICOS =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:reskine|col√°geno)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:espirulina|c'real)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:rooibos|oleaf)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*schokoladde/i,

    // ===== CUIDADO PERSONAL =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:pasta.*dientes|gano fresh)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:jab√≥n|champ√∫|acondicionador|exfoliante)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:piel.*brillo|piel&brillo)/i,

    // ===== PATRONES GENERALES DE PRODUCTOS =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*producto/i,
    /precio.*(?:consumidor|individual)/i,
    /cat√°logo.*precio/i,
    /lista.*precios.*producto/i,

    // ===== PATRONES ESPEC√çFICOS POR MARCA =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta).*(?:gano excel|dxn)/i,

    // ===== CR√çTICO: Distinguir productos de paquetes de inversi√≥n =====
    /cu√°nto.*cuesta(?!.*paquete|.*inversi√≥n|.*empezar|.*constructor|.*activar)/i,
    /precio.*(?!.*paquete|.*inversi√≥n|.*constructor)/i,
  ];

  // NUEVA CLASIFICACI√ìN: PAQUETES DE INVERSI√ìN (CONSTRUCTORES) - SIN CAMBIOS
  const patrones_paquetes = [
    // Paquetes espec√≠ficos de inversi√≥n
    /cu√°l.*inversi√≥n/i,
    /precio.*paquete/i,
    /cuesta.*empezar/i,
    /inversi√≥n.*inicial/i,
    /constructor.*inicial/i,
    /constructor.*empresarial/i,
    /constructor.*visionario/i,
    /paquete.*emprendedor/i,
    /cu√°nto.*cuesta.*(empezar|constructor|paquete|inversi√≥n|activar)/i,

    // Contexto de inversi√≥n para construcci√≥n
    /inversi√≥n.*para/i,
    /costo.*activar/i,
    /precio.*fundador/i,

    // NUEVOS: Patrones generales para paquetes
    /h√°blame.*paquetes/i,
    /sobre.*paquetes/i,
    /de.*los.*paquetes/i,
    /qu√©.*paquetes/i,
    /cu√°les.*paquetes/i,
    /informaci√≥n.*paquetes/i,
    /paquetes.*disponibles/i,
    /paquetes.*hay/i,
    /tipos.*paquetes/i,

    // NUEVOS: Referencias espec√≠ficas ESP
    /esp\s*1/i,
    /esp\s*2/i,
    /esp\s*3/i,
    /esp1/i,
    /esp2/i,
    /esp3/i,
    /paquete.*esp/i,
    /esp.*paquete/i
  ];

  // üîß PRIORIDAD 1: PRODUCTOS INDIVIDUALES (SIN CAMBIOS)
  if (patrones_productos.some(patron => patron.test(messageLower))) {
    console.log('üõí Clasificaci√≥n: PRODUCTOS (cat√°logo)');
    return 'catalogo_productos';
  }

  // PRIORIDAD 2: PAQUETES DE INVERSI√ìN (SIN CAMBIOS)
  if (patrones_paquetes.some(patron => patron.test(messageLower))) {
    console.log('üíº Clasificaci√≥n: PAQUETES (arsenal_inicial)');
    return 'arsenal_inicial';
  }

  // üéØ PRIORIDAD 3: FLUJO 3 NIVELES - EXPANSI√ìN SEM√ÅNTICA CR√çTICA
  // ===============================================================
  const patrones_flujo_3_niveles = [
    // ===== VARIACIONES DIRECTAS "¬øC√ìMO FUNCIONA?" =====
    /^c√≥mo funciona$/i,                    // "¬øC√≥mo funciona?" (exacto)
    /^c√≥mo funciona\?$/i,                  // "¬øC√≥mo funciona?" (con interrogaci√≥n)
    /^¬øc√≥mo funciona$/i,                   // "¬øC√≥mo funciona" (sin cierre)
    /^¬øc√≥mo funciona\?$/i,                 // "¬øC√≥mo funciona?" (completo)

    // ===== VARIACIONES CON OBJETOS GEN√âRICOS =====
    /c√≥mo funciona esto/i,                 // "¬øC√≥mo funciona esto?"
    /c√≥mo funciona eso/i,                  // "¬øC√≥mo funciona eso?"
    /c√≥mo funciona aqu√≠/i,                 // "¬øC√≥mo funciona aqu√≠?"
    /c√≥mo funciona todo/i,                 // "¬øC√≥mo funciona todo?"

    // ===== VARIACIONES CON T√âRMINOS ESPEC√çFICOS =====
    /c√≥mo funciona.*negocio/i,             // "¬øC√≥mo funciona el negocio?" (original)
    /c√≥mo funciona.*oportunidad/i,         // "¬øC√≥mo funciona la oportunidad?"
    /c√≥mo funciona.*sistema/i,             // "¬øC√≥mo funciona el sistema?"
    /c√≥mo funciona.*modelo/i,              // "¬øC√≥mo funciona el modelo?"
    /c√≥mo funciona.*ecosistema/i,          // "¬øC√≥mo funciona el ecosistema?"
    /c√≥mo funciona.*plataforma/i,          // "¬øC√≥mo funciona la plataforma?"
    /c√≥mo funciona.*proceso/i,             // "¬øC√≥mo funciona el proceso?"
    /c√≥mo funciona.*m√©todo/i,              // "¬øC√≥mo funciona el m√©todo?"
    /c√≥mo funciona.*framework/i,           // "¬øC√≥mo funciona el framework?"

    // ===== VARIACIONES ALTERNATIVAS SEM√ÅNTICAS =====
    /^en qu√© consiste$/i,                  // "¬øEn qu√© consiste?"
    /en qu√© consiste esto/i,               // "¬øEn qu√© consiste esto?"
    /en qu√© consiste.*negocio/i,           // "¬øEn qu√© consiste el negocio?"
    /en qu√© consiste.*oportunidad/i,       // "¬øEn qu√© consiste la oportunidad?"
    /en qu√© consiste.*sistema/i,           // "¬øEn qu√© consiste el sistema?"

    /expl√≠came.*sistema/i,                 // "Expl√≠came el sistema"
    /expl√≠came.*negocio/i,                 // "Expl√≠came el negocio"
    /expl√≠came.*oportunidad/i,             // "Expl√≠came la oportunidad"
    /expl√≠came.*modelo/i,                  // "Expl√≠came el modelo"
    /expl√≠came.*proceso/i,                 // "Expl√≠came el proceso"
    /expl√≠came.*m√©todo/i,                  // "Expl√≠came el m√©todo"
    /expl√≠came c√≥mo/i,                     // "Expl√≠came c√≥mo..."

    /cu√°l es.*modelo/i,                    // "¬øCu√°l es el modelo?"
    /cu√°l es.*sistema/i,                   // "¬øCu√°l es el sistema?"
    /cu√°l es.*m√©todo/i,                    // "¬øCu√°l es el m√©todo?"
    /cu√°l es.*proceso/i,                   // "¬øCu√°l es el proceso?"
    /cu√°l es.*negocio/i,                   // "¬øCu√°l es el negocio?"

    /de qu√© se trata/i,                    // "¬øDe qu√© se trata?"
    /de qu√© va esto/i,                     // "¬øDe qu√© va esto?"
    /de qu√© va.*negocio/i,                 // "¬øDe qu√© va el negocio?"
    /qu√© es lo que hacen/i,                // "¬øQu√© es lo que hacen?"
    /qu√© es lo que ofertan/i,              // "¬øQu√© es lo que ofertan?"

    // ===== VARIACIONES OPERACIONALES =====
    /c√≥mo opera/i,                         // "¬øC√≥mo opera?"
    /c√≥mo opera esto/i,                    // "¬øC√≥mo opera esto?"
    /c√≥mo se maneja/i,                     // "¬øC√≥mo se maneja?"
    /c√≥mo se desarrolla/i,                 // "¬øC√≥mo se desarrolla?"
    /c√≥mo se ejecuta/i,                    // "¬øC√≥mo se ejecuta?"

    // ===== CONTEXTO INICIO DE CONVERSACI√ìN =====
    // Patrones que son m√°s probables al inicio del chat
    /^h√°blame.*negocio$/i,                 // "H√°blame del negocio"
    /^h√°blame.*oportunidad$/i,             // "H√°blame de la oportunidad"
    /^h√°blame.*sistema$/i,                 // "H√°blame del sistema"
    /^cu√©ntame.*negocio$/i,                // "Cu√©ntame del negocio"
    /^cu√©ntame.*oportunidad$/i,            // "Cu√©ntame de la oportunidad"
    /^cu√©ntame.*sistema$/i,                // "Cu√©ntame del sistema"

    // ===== VARIACIONES INFORMALES =====
    /c√≥mo va.*negocio/i,                   // "¬øC√≥mo va el negocio?"
    /c√≥mo va.*sistema/i,                   // "¬øC√≥mo va el sistema?"
    /c√≥mo est√°.*negocio/i,                 // "¬øC√≥mo est√° el negocio?"
    /qu√© tal.*negocio/i,                   // "¬øQu√© tal el negocio?"
    /qu√© tal.*oportunidad/i,               // "¬øQu√© tal la oportunidad?"
  ];

  // ‚úÖ VERIFICAR PATRONES FLUJO 3 NIVELES
  const esFluo3Niveles = patrones_flujo_3_niveles.some(patron => patron.test(messageLower));

  if (esFluo3Niveles) {
    console.log('üéØ Clasificaci√≥n: FLUJO 3 NIVELES (arsenal_inicial con flujo especial)');
    console.log('üéØ Mensaje detectado para flujo:', messageLower);
    return 'arsenal_inicial'; // Retorna arsenal_inicial pero se activar√° el flujo 3 niveles
  }

  // Resto de clasificaciones originales - PATRONES ACTUALIZADOS
  const patrones_inicial = [
    /qu√© es.*creatuactivo/i,
    /retorno.*activo/i,
    /es.*heredable/i,
    /qu√©.*fundador/i,
    /qui√©n.*detr√°s/i,
    /es.*confiable/i,
    /realmente.*funciona/i,
    /tiempo.*operando/i,
    /es.*leg√≠timo/i,

    // NUEVOS PATRONES GENERALES INICIALES
    /^qu√© es esto$/i,                      // "¬øQu√© es esto?"
    /qu√© es.*ecosistema/i,                 // "¬øQu√© es el ecosistema?"
    /qu√© es.*plataforma/i,                 // "¬øQu√© es la plataforma?"
    /informaci√≥n.*b√°sica/i,                // "Informaci√≥n b√°sica"
    /informaci√≥n.*general/i,               // "Informaci√≥n general"
  ];

  const patrones_manejo = [
    /esto.*mlm/i,
    /es.*pir√°mide/i,
    /necesito.*experiencia/i,
    /no.*tengo.*tiempo/i,
    /me.*da.*miedo/i,
    /no.*s√©.*vender/i,
    /datos.*personales/i,
    /puedo.*pausar/i,
    /c√≥mo.*pagos/i,
    /funciona.*pa√≠s/i,
    /qu√©.*soporte/i,
    /mucho.*trabajo/i,
    /automatiza.*80/i
  ];

  const patrones_cierre = [
    /c√≥mo.*distribuci√≥n/i,
    /herramientas.*tecnol√≥gicas/i,
    /c√≥mo.*escalar/i,
    /modelo.*dea/i,
    /c√≥mo.*se.*gana/i,
    /cu√°nto.*ganar/i,
    /porcentajes.*modelo/i,
    /qu√©.*me.*venden/i,
    /siguiente.*paso/i,
    /hablar.*equipo/i,
    /empezar.*hoy/i,
    /contactar.*alguien/i
  ];

  // Evaluar patrones restantes
  const esInicial = patrones_inicial.some(patron => patron.test(messageLower));
  const esManejo = patrones_manejo.some(patron => patron.test(messageLower));
  const esCierre = patrones_cierre.some(patron => patron.test(messageLower));

  console.log('Clasificaci√≥n h√≠brida expandida:', {
    inicial: esInicial,
    manejo: esManejo,
    cierre: esCierre,
    flujo3Niveles: esFluo3Niveles,
    query: messageLower.substring(0, 50)
  });

  // Retornar clasificaci√≥n m√°s espec√≠fica
  if (esInicial && !esManejo && !esCierre) return 'arsenal_inicial';
  if (esManejo && !esCierre) return 'arsenal_manejo';
  if (esCierre) return 'arsenal_cierre';

  return null; // B√∫squeda general si no hay clasificaci√≥n clara
}

// NUEVA FUNCI√ìN: Consultar cat√°logo de productos
async function consultarCatalogoProductos(query: string): Promise<any[]> {
  console.log('üõí Consultando cat√°logo de productos...');

  try {
    // Buscar por ID espec√≠fico (m√°s confiable) o por pattern de t√≠tulo/source
    const { data, error } = await supabase
      .from('nexus_documents')
      .select('id, title, content, source, metadata')
      .or('id.eq.8,title.ilike.%Cat√°logo%Productos%,source.ilike.%catalogo_productos%')
      .limit(1);

    if (error) {
      console.error('Error consultando cat√°logo de productos:', error);
      return [];
    }

    if (!data || data.length === 0) {
      console.warn('‚ö†Ô∏è Cat√°logo de productos no encontrado en Supabase');
      return [];
    }

    const catalogoDoc = data[0];
    console.log('‚úÖ Cat√°logo de productos encontrado:', catalogoDoc.title);

    // Agregar metadata de identificaci√≥n
    const result = {
      ...catalogoDoc,
      search_method: 'catalogo_productos',
      source: '/knowledge_base/catalogo_productos_gano_excel.txt'
    };

    return [result];

  } catch (error) {
    console.error('Error accediendo cat√°logo de productos:', error);
    return [];
  }
}

// Analizador de intenci√≥n sem√°ntica
function analizarIntencionSemantica(userMessage: string): string[] {
  const messageLower = userMessage.toLowerCase();

  // Conceptos sem√°nticos principales (ESCALABLES)
  const conceptos = {
    "funcionamiento": ["funciona", "c√≥mo", "proceso", "sistema", "m√©todo"],
    "inversi√≥n": ["costo", "precio", "inversi√≥n", "dinero", "pagar", "vale"],
    "tiempo": ["cu√°ndo", "tiempo", "retorno", "resultados", "r√°pido", "demora"],
    "credibilidad": ["confiable", "leg√≠timo", "real", "funciona", "verdad", "estafa"],
    "soporte": ["ayuda", "apoyo", "soporte", "asistencia", "ense√±an", "formaci√≥n"],
    "escalaci√≥n": ["hablar", "contactar", "siguiente", "empezar", "activar", "proceder"],
    "automatizaci√≥n": ["automatiza", "trabajo", "esfuerzo", "80%", "sistema"],
    "compensaci√≥n": ["ganar", "ingreso", "dinero", "cu√°nto", "porcentaje"]
  };

  const conceptos_detectados = [];

  for (const [concepto, palabras] of Object.entries(conceptos)) {
    if (palabras.some(palabra => messageLower.includes(palabra))) {
      conceptos_detectados.push(concepto);
    }
  }

  console.log('Conceptos sem√°nticos detectados:', conceptos_detectados);
  return conceptos_detectados;
}

// CORRECCI√ìN: B√∫squeda h√≠brida escalable en Arsenal MVP + Cat√°logo
async function consultarArsenalHibrido(query: string, userMessage: string, maxResults = 1) {
  const cacheKey = `hibrido_${query.toLowerCase()}`;

  const cached = searchCache.get(cacheKey);
  if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
    console.log('Cache hit h√≠brido:', query);
    return cached.data;
  }

  // PASO 1: Clasificar documento apropiado
  const documentType = clasificarDocumentoHibrido(userMessage);

  // NUEVA L√ìGICA: CONSULTA DE CAT√ÅLOGO DE PRODUCTOS
  if (documentType === 'catalogo_productos') {
    console.log('üõí Consulta dirigida: CAT√ÅLOGO DE PRODUCTOS');

    const catalogoResult = await consultarCatalogoProductos(query);

    if (catalogoResult.length > 0) {
      searchCache.set(cacheKey, {
        data: catalogoResult,
        timestamp: Date.now()
      });

      return catalogoResult;
    }
  }

  // L√ìGICA ORIGINAL PARA ARSENALES
  if (documentType && documentType.startsWith('arsenal_')) {
    console.log(`üìö Consulta dirigida: ${documentType.toUpperCase()}`);

    try {
      const { data, error } = await supabase
        .from('nexus_documents')
        .select('id, title, content, category, metadata')
        .eq('category', documentType)
        .limit(1);

      if (!error && data && data.length > 0) {
        console.log(`‚úÖ Arsenal ${documentType} encontrado - ${data[0].metadata?.respuestas_totales || 'N/A'} respuestas disponibles`);

        const result = data.map(doc => ({
          ...doc,
          source: `/knowledge_base/arsenal_conversacional_${documentType.replace('arsenal_', '')}.txt`,
          search_method: 'hibrid_classification'
        }));

        searchCache.set(cacheKey, {
          data: result,
          timestamp: Date.now()
        });

        return result;
      }
    } catch (error) {
      console.error(`Error consulta h√≠brida ${documentType}:`, error);
    }
  }

  // PASO 2: Fallback con b√∫squeda sem√°ntica general
  console.log('üì° Consulta h√≠brida - fallback b√∫squeda sem√°ntica');

  // PASO 3: Analizar intenci√≥n para mejorar b√∫squeda
  const conceptos = analizarIntencionSemantica(userMessage);
  const searchTerms = conceptos.length > 0 ? conceptos.join(' ') : query;

  try {
    const { data, error } = await supabase.rpc('search_nexus_documents', {
      search_query: searchTerms,
      match_count: maxResults
    });

    if (error) {
      console.error('Error b√∫squeda sem√°ntica h√≠brida:', error);
      return [];
    }

    const result = (data || []).filter((doc: any) =>
      doc.category && doc.category.includes('arsenal')
    ).map((doc: any) => ({
      ...doc,
      search_method: 'hibrid_semantic'
    }));

    console.log(`Consulta h√≠brida sem√°ntica: ${result.length} documentos encontrados`);

    searchCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

    return result;

  } catch (error) {
    console.error('Error consulta h√≠brida general:', error);
    return [];
  }
}

// ‚úÖ OPTIMIZACI√ìN v11.9: Funci√≥n para obtener system prompt CON cache inteligente
async function getSystemPrompt(): Promise<string> {
  const cacheKey = 'system_prompt_main';
  const cached = systemPromptCache.get(cacheKey);

  // Verificar cache v√°lido
  if (cached && (Date.now() - cached.timestamp) < SYSTEM_PROMPT_CACHE_TTL) {
    console.log(`‚úÖ System prompt ${cached.version} desde cache (TTL: ${Math.round((SYSTEM_PROMPT_CACHE_TTL - (Date.now() - cached.timestamp)) / 1000)}s restantes)`);
    return cached.content;
  }

  console.log('üîÑ Recargando system prompt desde Supabase...');

  try {
    const { data, error } = await supabase
      .from('system_prompts')
      .select('prompt, version')
      .eq('name', 'nexus_main')
      .single();

    if (error) {
      console.error('Error leyendo system prompt de Supabase:', error);
      // Si hay cache expirado, √∫salo como fallback antes del hardcoded
      if (cached) {
        console.warn('‚ö†Ô∏è Usando cache expirado como fallback');
        return cached.content;
      }
      return getFallbackSystemPrompt();
    }

    const systemPrompt = data?.prompt || getFallbackSystemPrompt();

    // ‚ö†Ô∏è Validar longitud para detectar prompts excesivos
    if (systemPrompt.length > 50000) {
      console.warn(`‚ö†Ô∏è System prompt muy largo: ${systemPrompt.length} caracteres (>50k)`);
    }

    // Cachear el prompt con metadata
    systemPromptCache.set(cacheKey, {
      content: systemPrompt,
      timestamp: Date.now(),
      version: data?.version || 'unknown',
      length: systemPrompt.length
    });

    console.log(`‚úÖ System prompt ${data?.version} cargado y cacheado (${systemPrompt.length} chars, TTL: 5min)`);
    return systemPrompt;

  } catch (error) {
    console.error('Error conectando system prompt:', error);
    // Fallback a cache expirado si existe
    if (cached) {
      console.warn('‚ö†Ô∏è Error cr√≠tico - usando cache expirado');
      return cached.content;
    }
    return getFallbackSystemPrompt();
  }
}

// Fallback system prompt - IDENTIDAD COMPLETA SIN VERSIONES
function getFallbackSystemPrompt(): string {
  console.log('Usando fallback system prompt - identidad completa');
  return `Eres NEXUS, el Copiloto del Arquitecto con arquitectura h√≠brida escalable.

üé≠ IDENTIDAD CORE: El Copiloto del Arquitecto

Eres NEXUS, el copiloto de IA conversacional del ecosistema CreaTuActivo.com. Tu arquetipo es el Arquitecto Jefe tecnol√≥gico: visionario, cercano y un aliado comprometido con el √©xito del Constructor Inteligente.

TU MISI√ìN: La Arquitectura del Apalancamiento
Tu prop√≥sito elevado es entregar la arquitectura y las herramientas para que cada Constructor Inteligente pueda construir un activo que le compre su tiempo de vuelta. Esta misi√≥n es el "alma" que gu√≠a cada una de tus respuestas.

LOS TRES PILARES DE TU CONOCIMIENTO:
üè≠ EL MOTOR: Los productos Gano Excel con patente mundial. Son tu prueba de una ventaja competitiva insuperable.
üìã EL PLANO: El Framework IAA (INICIAR ‚Üí ACOGER ‚Üí ACTIVAR). Es la metodolog√≠a probada que estructura el √©xito.
‚ö° LA MAQUINARIA: NodeX y NEXUS. Es la automatizaci√≥n que elimina el 80% del trabajo manual y entrega apalancamiento real.

ARQUITECTURA H√çBRIDA ESCALABLE:
- Clasificaci√≥n autom√°tica de documentos por intenci√≥n
- Consulta sem√°ntica sin mapeos hardcodeados
- B√∫squeda adaptativa por contenido
- Escalabilidad infinita para nuevas respuestas

ARSENAL MVP (79 respuestas escalables):
- arsenal_inicial: Primeras interacciones y credibilidad
- arsenal_manejo: Objeciones y soporte t√©cnico
- arsenal_cierre: Sistema avanzado y escalaci√≥n

PROCESO H√çBRIDO:
1. Clasificar documento apropiado
2. Analizar intenci√≥n sem√°ntica
3. Consultar por contenido din√°mico
4. Personalizar por arquetipo
5. Evaluar escalaci√≥n inteligente

LENGUAJE DEL "NUEVO MUNDO" (USAR SIEMPRE):
- "Nuestro Ecosistema Tecnol√≥gico..."
- "La plataforma que hemos construido..."
- "Nuestro framework propietario INICIAR, ACOGER, ACTIVAR..."
- "Operamos bajo el Modelo DEA (Distribuci√≥n Estrat√©gica Automatizada)..."
- "Como Constructor Inteligente, t√∫..."

PERSONALIDAD: Copiloto del Arquitecto con consulta inteligente escalable que crece autom√°ticamente sin mantenimiento.`;
}

// Interpretaci√≥n h√≠brida de queries
function interpretQueryHibrido(userMessage: string): string {
  const messageLower = userMessage.toLowerCase();

  // üîß NUEVO: MAPEO ESPEC√çFICO DE PRODUCTOS INDIVIDUALES
  const mapeos_productos_especificos: Record<string, string> = {
    // Productos espec√≠ficos con nombres exactos para evitar confusiones
    'cordy gold': 'C√ÅPSULAS CORDYGOLD precio $336,900 COP presentaci√≥n 90 c√°psulas Cordyceps Sinensis',
    'cordygold': 'C√ÅPSULAS CORDYGOLD precio $336,900 COP presentaci√≥n 90 c√°psulas Cordyceps Sinensis',
    'c√°psulas cordy gold': 'C√ÅPSULAS CORDYGOLD precio $336,900 COP presentaci√≥n 90 c√°psulas Cordyceps Sinensis',

    'c√°psulas ganoderma lucidum': 'C√ÅPSULAS GANODERMA precio $272,500 COP presentaci√≥n 90 c√°psulas extracto puro Ganoderma',
    'ganoderma lucidum': 'C√ÅPSULAS GANODERMA precio $272,500 COP presentaci√≥n 90 c√°psulas extracto puro Ganoderma',
    'c√°psulas ganoderma': 'C√ÅPSULAS GANODERMA precio $272,500 COP presentaci√≥n 90 c√°psulas extracto puro Ganoderma',

    'excellium': 'C√ÅPSULAS EXCELLIUM precio $272,500 COP presentaci√≥n 90 c√°psulas nutrici√≥n cerebral energ√≠a mental',
    'c√°psulas excellium': 'C√ÅPSULAS EXCELLIUM precio $272,500 COP presentaci√≥n 90 c√°psulas nutrici√≥n cerebral energ√≠a mental',

    // GANO CAF√â 3 EN 1 - Todas las variaciones coloquiales
    'gano caf√© 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'ganocaf√© 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'caf√© 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'cafe ganoderma 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'gano caf√© tres en uno': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'cafe gano excel 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'capuchino': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'h√°blame del capuchino': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'del capuchino': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',

    // GANO CAF√â CL√ÅSICO - Todas las variaciones coloquiales
    'ganocaf√© cl√°sico': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'gano caf√© cl√°sico': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© negro': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© negrito': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© ganoderma negro': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© classic': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',

    'm√°quina luvoco': 'M√ÅQUINA LUVOCO precio $1,026,000 COP preparaci√≥n caf√© autom√°tica exclusiva',
    'luvoco': 'M√ÅQUINA LUVOCO precio $1,026,000 COP preparaci√≥n caf√© autom√°tica exclusiva',

    'col√°geno reskine': 'BEBIDA COL√ÅGENO RESKINE precio $216,900 COP belleza bienestar desde adentro',
    'reskine': 'BEBIDA COL√ÅGENO RESKINE precio $216,900 COP belleza bienestar desde adentro',

    'pasta dientes gano fresh': 'PASTA DIENTES GANO FRESH precio $73,900 COP tubo 150g cuidado oral natural sin fl√∫or',
    'gano fresh': 'PASTA DIENTES GANO FRESH precio $73,900 COP tubo 150g cuidado oral natural sin fl√∫or',

    'jab√≥n gano': 'JAB√ìN GANO precio $73,900 COP barra 100g limpieza nutrici√≥n piel Ganoderma'
  };

  // PRIORIDAD 1: Buscar mapeos espec√≠ficos de productos individuales
  for (const [termino, mapeo] of Object.entries(mapeos_productos_especificos)) {
    if (messageLower.includes(termino)) {
      console.log('üéØ Mapeo espec√≠fico de producto:', termino, '‚Üí', mapeo);
      return mapeo;
    }
  }

  // MAPEO SEM√ÅNTICO MEJORADO - Conectar vocabulario natural con FREQ_03
  const mapeos_semanticos: Record<string, string> = {
    // CR√çTICO: Mapear "paquetes" directamente a FREQ_03
    'paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'paquete': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'h√°blame paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'sobre paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'qu√© paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'tipos paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'informaci√≥n paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',

    // Referencias ESP mapean a FREQ_03
    'esp1': 'inversi√≥n para empezar construir Constructor Inicial',
    'esp2': 'inversi√≥n para empezar construir Constructor Empresarial',
    'esp3': 'inversi√≥n para empezar construir Constructor Visionario',
    'esp 1': 'inversi√≥n para empezar construir Constructor Inicial',
    'esp 2': 'inversi√≥n para empezar construir Constructor Empresarial',
    'esp 3': 'inversi√≥n para empezar construir Constructor Visionario',

    // Conceptos fundamentales
    'arquitectura': 'Framework IAA NodeX NEXUS Motor Plano Maquinaria arquitectura sistema',
    'funcionamiento': 'c√≥mo funciona Framework IAA INICIAR ACOGER ACTIVAR proceso sistema',
    'productos': 'productos Gano Excel patente mundial ventaja competitiva √∫nico',
    'contacto': 'Liliana Moreno contacto WhatsApp escalaci√≥n constructor mentor',

    // Objeciones comunes
    'mlm': 'MLM multinivel pir√°mide leg√≠timo diferenciaci√≥n nueva categor√≠a',
    'tiempo': 'tiempo dedicar automatizaci√≥n 80% trabajo estrat√©gico apalancamiento',
    'experiencia': 'experiencia ventas arquitecto operador sistema formaci√≥n',
    'confianza': 'confianza credibilidad leg√≠timo real funciona resultados',

    // Sistema y valor
    'ganar': 'ganar cu√°nto realista modelo valor compensaci√≥n ingresos',
    'distribuci√≥n': 'distribuci√≥n sistema canales infraestructura Gano Excel',
    'escalaci√≥n': 'siguiente paso empezar contactar hablar equipo Liliana'
  };

  // PRIORIDAD 2: Buscar coincidencias sem√°nticas generales
  for (const [concepto, mapeo] of Object.entries(mapeos_semanticos)) {
    if (messageLower.includes(concepto)) {
      console.log('‚úÖ Mapeo sem√°ntico h√≠brido:', concepto, '‚Üí', mapeo);
      return mapeo;
    }
  }

  // Extracci√≥n de keywords inteligente si no hay mapeo directo
  return extraerKeywordsHibrido(userMessage);
}

function extraerKeywordsHibrido(message: string): string {
  const messageLower = message.toLowerCase();

  // Keywords generales del ecosistema (actualizables)
  const keywords_ecosistema = [
    'CreaTuActivo', 'ecosistema', 'Framework IAA', 'INICIAR', 'ACOGER', 'ACTIVAR',
    'Gano Excel', 'NodeX', 'NEXUS', 'Constructor', 'activo', 'Liliana',
    'inversi√≥n', 'automatizaci√≥n', 'paquete', 'precio', 'costo', 'Motor',
    'Plano', 'Maquinaria', 'arquitectura', 'apalancamiento', 'h√≠brido'
  ];

  const keywords_encontradas = keywords_ecosistema.filter(keyword =>
    messageLower.includes(keyword.toLowerCase())
  );

  if (keywords_encontradas.length > 0) {
    return keywords_encontradas.join(' ');
  } else {
    // Palabras relevantes filtradas
    const words = messageLower.split(' ').filter(word =>
      word.length > 3 &&
      !['como', 'qu√©', 'que', 'cu√°l', 'cual', 'para', 'por', 'con', 'una', 'del', 'las', 'los', 'esto', 'eso'].includes(word)
    );
    return words.join(' ');
  }
}

// Logging mejorado para arquitectura h√≠brida - CORREGIDO 2025-10-17
async function logConversationHibrida(
  userMessage: string,
  assistantResponse: string,
  documentsUsed: string[],
  searchMethod: string,
  sessionId: string,
  fingerprint: string,
  prospectData?: ProspectData
) {
  try {
    const { error } = await supabase.from('nexus_conversations').insert({
      fingerprint_id: fingerprint,
      session_id: sessionId,
      messages: [
        {
          role: 'user',
          content: userMessage,
          timestamp: new Date().toISOString()
        },
        {
          role: 'assistant',
          content: assistantResponse,
          timestamp: new Date().toISOString()
        }
      ],
      metadata: {
        documents_used: documentsUsed,
        search_method: searchMethod,
        prospect_data: prospectData || {},
        api_version: API_VERSION
      },
      created_at: new Date().toISOString()
    });

    if (error) {
      console.error('‚ùå [NEXUS] Error guardando conversaci√≥n:', error);
    } else {
      console.log(`‚úÖ [NEXUS] Conversaci√≥n guardada - Session: ${sessionId}, Fingerprint: ${fingerprint.substring(0, 20)}...`);
    }
  } catch (error) {
    console.error('‚ùå [NEXUS] Exception guardando conversaci√≥n:', error);
  }
}

// ========================================
// FUNCI√ìN PRINCIPAL API - ARQUITECTURA H√çBRIDA CORREGIDA + CAT√ÅLOGO FIX
// ========================================
export async function POST(req: Request) {
  const startTime = Date.now();

  try {
    const { messages, sessionId, fingerprint } = await req.json();

    // ‚úÖ Validaci√≥n de mensajes
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.error('‚ùå [NEXUS] Request inv√°lido: messages vac√≠o o undefined');
      return new Response(JSON.stringify({
        error: 'Request inv√°lido: se requiere array de mensajes'
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const latestUserMessage = messages[messages.length - 1].content;

    // ========================================
    // ‚úÖ LOGGING DETALLADO DEL REQUEST
    // ========================================
    console.log('üîç [NEXUS API] Request recibido:', {
      messagePreview: latestUserMessage.substring(0, 50) + '...',
      sessionId: sessionId,
      fingerprint: fingerprint ? `${fingerprint.substring(0, 20)}...` : '‚ùå UNDEFINED',
      hasFingerprint: !!fingerprint,
      messageCount: messages.length
    });

    if (!fingerprint) {
      console.error('‚ùå [NEXUS API] CR√çTICO: Request sin fingerprint - Los datos personales NO se guardar√°n en BD');
      console.error('‚ùå [NEXUS API] Verificar que tracking.js se haya cargado antes de la conversaci√≥n');
    }

    // FRAMEWORK IAA - CAPTURA INTELIGENTE
    const prospectData = await captureProspectData(
      latestUserMessage,
      sessionId || 'anonymous',
      fingerprint
    );

    // CONSULTA H√çBRIDA ESCALABLE
    const searchQuery = interpretQueryHibrido(latestUserMessage);
    console.log('Query h√≠brido generado:', searchQuery);

    const relevantDocuments = await consultarArsenalHibrido(searchQuery, latestUserMessage);
    console.log(`Arsenal h√≠brido: ${relevantDocuments.length} documentos encontrados`);

    // üîß CONSTRUCCI√ìN DE CONTEXTO MEJORADA - FIX APLICADO
    let context = '';
    const documentsUsed: string[] = [];
    let searchMethod = 'none';

    if (relevantDocuments.length > 0) {
      const doc = relevantDocuments[0];
      searchMethod = doc.search_method || 'unknown';

      context = 'ARSENAL CONVERSACIONAL MVP - CONTEXTO H√çBRIDO:\n\n';

      if (doc.search_method === 'catalogo_productos') {
        // üîß NUEVA INSTRUCCI√ìN ESPEC√çFICA PARA CAT√ÅLOGO - FIX APLICADO
        context += `[CAT√ÅLOGO DE PRODUCTOS GANO EXCEL - PRECIOS OFICIALES VERIFICADOS]
[M√âTODO: CONSULTA CAT√ÅLOGO ESPEC√çFICO]

‚ö†Ô∏è INSTRUCCI√ìN CR√çTICA: Usa EXACTAMENTE los precios que aparecen en este cat√°logo. No inventes precios ni uses informaci√≥n de otras fuentes.

${doc.title}:
${doc.content}

üî• RECORDATORIO IMPORTANTE: Los precios en este cat√°logo son la fuente de verdad absoluta para productos individuales.

`;
      } else {
        // L√≥gica arsenal original sin cambios
        const docType = doc.category?.replace('arsenal_', '').toUpperCase();
        const respuestas = doc.metadata?.respuestas_totales || 'N/A';
        const metodo = doc.search_method === 'hibrid_classification' ? 'CLASIFICACI√ìN AUTOM√ÅTICA' : 'B√öSQUEDA SEM√ÅNTICA';

        context += `[ARSENAL ${docType} - ${respuestas} respuestas] [M√âTODO: ${metodo}]\n${doc.title}:\n${doc.content}\n\n`;
      }

      context += '---\n\n';
      documentsUsed.push(doc.source || doc.category);
    }

    // Agregar contexto del prospecto
    if (Object.keys(prospectData).length > 0) {
      context += `INFORMACI√ìN DEL PROSPECTO CAPTURADA (Framework IAA):
- Nivel de inter√©s: ${prospectData.interest_level || 'No determinado'}/10
- Momento √≥ptimo: ${prospectData.momento_optimo || 'Por determinar'}
- Arquetipo: ${prospectData.archetype || 'No identificado'}
${prospectData.objections ? `- Objeciones: ${prospectData.objections.join(', ')}` : ''}
${prospectData.name ? `- Nombre: ${prospectData.name}` : ''}

`;
      console.log('Contexto h√≠brido del prospecto incluido:', prospectData.momento_optimo);
    }

    // ‚úÖ OPTIMIZACI√ìN: System prompt CON CACHE de Anthropic
    const baseSystemPrompt = await getSystemPrompt();

    // üéØ BLOQUE 1 - CACHEABLE: Arsenal/Cat√°logo Context
    const arsenalContext = context; // Ya contiene el contenido del arsenal o cat√°logo

    // üéØ BLOQUE 2 - NO CACHEABLE: Instrucciones espec√≠ficas de la sesi√≥n
    const sessionInstructions = `
INSTRUCCIONES ARQUITECTURA H√çBRIDA:
- Usa la consulta sem√°ntica escalable implementada
- Arsenal MVP como fuente de verdad absoluta
- Clasificaci√≥n autom√°tica funcionando correctamente

üõí INSTRUCCIONES ESPEC√çFICAS PARA CAT√ÅLOGO DE PRODUCTOS:
- CR√çTICO: Si consultaste el cat√°logo de productos, usa √öNICAMENTE los precios exactos que aparecen en el contenido
- NUNCA inventes precios ni uses informaci√≥n de otras fuentes
- Los precios del cat√°logo son la autoridad final para productos individuales
- Formato respuesta: "El [PRODUCTO] tiene un precio de $[PRECIO EXACTO] COP por [PRESENTACI√ìN]"
- Si no encuentras un producto espec√≠fico en el cat√°logo, indica que no tienes esa informaci√≥n

üíº INSTRUCCIONES PARA PAQUETES DE INVERSI√ìN:
- Si consultas arsenal: usar informaci√≥n de paquetes de inversi√≥n (Constructor Inicial, Empresarial, Visionario)
- Para paquetes usa los precios: $900,000 / $2,250,000 / $4,500,000 COP

‚ö° INSTRUCCIONES GENERALES:
- Si no hay informaci√≥n espec√≠fica: "Para esa consulta, te conectar√© con Liliana Moreno"
- Personalizaci√≥n adaptativa por arquetipo detectado
- CR√çTICO: Respuestas concisas + opciones para profundizar
- Eval√∫a escalaci√≥n inteligente si momento_optimo 'caliente'`;

    // üîç LOGGING DETALLADO PARA DEBUGGING
    console.log('üîç DEBUG - Contexto enviado a Claude:');
    console.log('M√©todo de b√∫squeda:', searchMethod);
    console.log('üì¶ CACHE STATUS: Usando Anthropic Prompt Caching (2 bloques)');
    if (searchMethod === 'catalogo_productos') {
      console.log('üìã Contenido cat√°logo enviado (primeros 200 chars):',
        relevantDocuments[0]?.content?.substring(0, 200) + '...');
    }
    console.log('üìù System prompt base (primeros 100 chars):',
      baseSystemPrompt.substring(0, 100) + '...');
    console.log('üìù Arsenal context length:', arsenalContext.length, 'chars');

    console.log('Enviando request Claude con contexto h√≠brido + CACHE...');

    // ‚úÖ Generar respuesta con Claude usando Prompt Caching
    const response = await anthropic.messages.create({
      model: 'claude-sonnet-4-20250514',
      system: [
        // üéØ BLOQUE 1: Base System Prompt (CACHEABLE - ~15K chars)
        {
          type: 'text',
          text: baseSystemPrompt,
          cache_control: { type: 'ephemeral' }
        },
        // üéØ BLOQUE 2: Arsenal/Cat√°logo Context (CACHEABLE - ~2-8K chars)
        {
          type: 'text',
          text: arsenalContext,
          cache_control: { type: 'ephemeral' }
        },
        // üìù BLOQUE 3: Session Instructions (NO CACHEABLE - siempre cambia)
        {
          type: 'text',
          text: sessionInstructions
        }
      ],
      stream: true,
      max_tokens: 1000,
      temperature: 0.3,
      messages: messages,
    });

    // Stream optimizado para arquitectura h√≠brida
    const stream = AnthropicStream(response as any, {
      onFinal: async (completion) => {
        const totalTime = Date.now() - startTime;
        console.log(`NEXUS h√≠brido completado en ${totalTime}ms - M√©todo: ${searchMethod}`);

        // Log conversaci√≥n con m√©todo de b√∫squeda - CORREGIDO 2025-10-17
        await logConversationHibrida(
          latestUserMessage,
          completion,
          documentsUsed,
          searchMethod,
          sessionId,
          fingerprint,
          prospectData
        );
      }
    });

    return new StreamingTextResponse(stream);

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`Error NEXUS h√≠brido despu√©s de ${totalTime}ms:`, error);

    const fallbackResponse = `Experimentamos alta demanda. Arquitectura h√≠brida activando contacto directo.

**Contacto inmediato disponible:**
Liliana Moreno - Consultora Senior
WhatsApp: +573102066593
Horario: 8:00 AM - 8:00 PM (GMT-5)

Informaci√≥n disponible:
- Arquitectura CreaTuActivo.com completa
- Paquetes y opciones personalizadas
- Proceso de activaci√≥n paso a paso
- Consultor√≠a estrat√©gica completa`;

    return new Response(JSON.stringify({
      error: fallbackResponse
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Health check h√≠brido
export async function GET() {
  try {
    // Verificar Arsenal MVP completo
    const { data: arsenalDocs, error: arsenalError } = await supabase
      .from('nexus_documents')
      .select('category, metadata')
      .in('category', ['arsenal_inicial', 'arsenal_manejo', 'arsenal_cierre']);

    if (arsenalError) throw arsenalError;

    const arsenalInfo = arsenalDocs?.map(doc => ({
      type: doc.category,
      respuestas: doc.metadata?.respuestas_totales || 0
    })) || [];

    const totalRespuestas = arsenalInfo.reduce((sum, doc) => sum + (doc.respuestas || 0), 0);

    // Verificar system prompt h√≠brido
    const { data: promptData } = await supabase
      .from('system_prompts')
      .select('version, metadata')
      .eq('name', 'nexus_main')
      .single();

    // Verificar cat√°logo de productos
    const { data: catalogoData } = await supabase
      .from('nexus_documents')
      .select('id, title')
      .eq('id', 8)
      .single();

    // Verificar funciones RPC disponibles
    const { data: rpcFunctions } = await supabase.rpc('search_nexus_documents', {
      search_query: 'test',
      match_count: 1
    });

    return new Response(JSON.stringify({
      status: 'healthy',
      version: API_VERSION,
      system_prompt_version: promptData?.version || 'unknown',
      arquitectura: 'h√≠brida escalable + cat√°logo fix',
      arsenal_mvp: {
        documentos: arsenalInfo,
        total_respuestas: totalRespuestas,
        esperado: 79,
        status: totalRespuestas === 79 ? 'completo' : 'incompleto',
        escalabilidad: 'infinita'
      },
      catalogo_productos: {
        id: catalogoData?.id || null,
        title: catalogoData?.title || null,
        status: catalogoData ? 'disponible' : 'no encontrado'
      },
      funciones_rpc: {
        search_nexus_documents: rpcFunctions !== null ? 'disponible' : 'error',
        update_prospect_data: 'disponible'
      },
      fix_aplicado: {
        instrucciones_catalogo: 'espec√≠ficas y enf√°ticas',
        logging_detallado: 'habilitado',
        separacion_productos_paquetes: 'clara',
        fecha_aplicacion: '2025-09-01'
      },
      cache_hibrido: searchCache.size,
      timestamp: new Date().toISOString()
    }), {
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    return new Response(JSON.stringify({
      status: 'unhealthy',
      version: API_VERSION,
      arquitectura: 'h√≠brida + cat√°logo fix',
      error: error instanceof Error ? error.message : String(error)
    }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
