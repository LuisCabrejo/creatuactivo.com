// src/app/api/nexus/route.ts
// API Route NEXUS - ARQUITECTURA H√çBRIDA + COMPLIANCE LEGAL v12.1
// VERSION: v12.1 - Timing Optimizado + Formato de Listas Mejorado
// ARSENAL: 79 respuestas en 3 documentos con b√∫squeda adaptativa
// IDENTIDAD: Copiloto del Arquitecto con onboarding legal + timing estrat√©gico
// CAMBIOS v12.1: Captura AL FINAL + Listas verticales + Datos acumulados
// COMPLIANCE: Ley 1581/2012 Art. 9 + UX optimizada (efecto de recencia)

import { createClient } from '@supabase/supabase-js';
import Anthropic from '@anthropic-ai/sdk';
import { AnthropicStream, StreamingTextResponse } from 'ai';

// 1. Configuraci√≥n de Clientes
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export const runtime = 'edge';
export const maxDuration = 30; // ‚úÖ OPTIMIZACI√ìN: 30s buffer para requests pesados

// Cache en memoria optimizado para arquitectura h√≠brida
const searchCache = new Map<string, any>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutos
// System prompt cache para reducir latencia
const systemPromptCache = new Map<string, any>();
const SYSTEM_PROMPT_CACHE_TTL = 5 * 60 * 1000; // 5 minutos (sincronizado con searchCache)

const API_VERSION = 'v12.1_timing_optimizado'; // ‚úÖ v12.1: Timing + Formato + Datos acumulados

// ========================================
// UTILIDADES - LIMPIEZA DE DATOS
// ========================================
/**
 * Remueve valores NULL y undefined de un objeto.
 * Evita que NULL sobreescriba datos existentes en el merge JSONB de PostgreSQL.
 * @param obj - Objeto con posibles valores NULL/undefined
 * @returns Objeto limpio solo con valores v√°lidos
 */
function removeNullValues(obj: Record<string, any>): Record<string, any> {
  return Object.fromEntries(
    Object.entries(obj).filter(([_, value]) => value !== null && value !== undefined)
  );
}

// ========================================
// FRAMEWORK IAA - CAPTURA INTELIGENTE
// ========================================
interface ProspectData {
  name?: string;
  email?: string;
  phone?: string;
  occupation?: string;
  interest_level?: number;
  objections?: string[];
  archetype?: string;
  package?: string;  // ‚úÖ NUEVO: paquete de inversi√≥n seleccionado
  momento_optimo?: string;
  preguntas?: string[];
  consent_granted?: boolean;
  consent_timestamp?: string;
}

// Funci√≥n para capturar datos del prospecto inteligentemente
async function captureProspectData(
  message: string,
  sessionId: string,
  fingerprint?: string,
  constructorUUID?: string | null
): Promise<ProspectData> {

  console.log('üîç [NEXUS] Captura datos h√≠brida - Input:', {
    message: message.substring(0, 100),
    sessionId,
    fingerprint,
    hasFingerprint: !!fingerprint
  });

  const data: ProspectData = {};
  const messageLower = message.toLowerCase();

  // CAPTURA DE NOMBRE
  const namePatterns = [
    /(?:me llamo|mi nombre es|soy)\s+([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)*)/i,
    /^([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)*)\s+es\s+mi\s+nombre/i,  // Formato invertido: "Disipro es mi nombre"
    /^([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)*)\s*-/i,                  // Nombre (1 o m√°s palabras) + gui√≥n: "Luis - precio" o "Juan P√©rez - precio"
    /^([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)*)\s+(?:y|dame|precio|cu√°nto|quiero|necesito|empezar|iniciar|a\)|b\)|c\)|d\)|e\)|f\))/i, // Nombre + conectores
    /^([A-Z√Ä-√ø][a-z√†-√ø]+(?:\s+[A-Z√Ä-√ø][a-z√†-√ø]+)*)\s*$/
  ];

  for (const pattern of namePatterns) {
    const match = message.match(pattern);
    if (match) {
      const capturedName = match[1].trim();
      // Validar que el nombre tenga al menos 2 caracteres (evita capturar solo letras de opciones)
      if (capturedName.length >= 2) {
        data.name = capturedName;
        console.log('‚úÖ [NEXUS] Nombre capturado:', data.name, 'del mensaje:', message.substring(0, 50));
        break;
      }
    }
  }

  if (!data.name && message.length < 30) {
    // Intento adicional: nombre simple sin patr√≥n estricto
    const simpleNameMatch = message.match(/^([A-Z√Ä-√øa-z√†-√ø]+(?:\s+[A-Z√Ä-√øa-z√†-√ø]+)?)\s*$/i);
    if (simpleNameMatch && !messageLower.match(/hola|gracias|si|no|ok|bien/)) {
      const capturedName = simpleNameMatch[1].trim();
      // Validar longitud m√≠nima de 2 caracteres
      if (capturedName.length >= 2) {
        data.name = capturedName;
        console.log('‚úÖ [NEXUS] Nombre capturado (patr√≥n simple):', data.name);
      }
    }
  }

  // CAPTURA DE WHATSAPP (Internacional - Multi-pa√≠s)
  // Soporta todos los pa√≠ses de operaci√≥n CreaTuActivo:
  // üá®üá¥ Colombia: +57 310 206 6593 o 320 3412323 (10 d√≠gitos)
  // üá∫üá∏ USA: +1 305 123 4567 (10 d√≠gitos)
  // üá≤üáΩ M√©xico: +52 55 1234 5678 (10 d√≠gitos)
  // üá™üá® Ecuador: +593 99 123 4567 (9 d√≠gitos)
  // üáµüá™ Per√∫: +51 987 654 321 (9 d√≠gitos)
  // üáªüá™ Venezuela: +58 414 123 4567 (10 d√≠gitos)
  // üáßüá∑ Brasil: +55 11 91234 5678 (11 d√≠gitos)
  // Acepta formatos: con/sin +, con/sin espacios, con/sin guiones, con/sin par√©ntesis

  // Regex que captura n√∫meros con formato flexible
  const phonePattern = /(?:\+?\d{1,4}[\s\-\(\)]?)?([\d\s\-\(\)]{7,20})/g;
  const phoneMatches = message.match(phonePattern);

  if (phoneMatches) {
    for (const match of phoneMatches) {
      // Extraer solo d√≠gitos (limpiar +, espacios, guiones, par√©ntesis)
      const digitsOnly = match.replace(/[\s\-\(\)+]/g, '');

      // Validar longitud para WhatsApp internacional (7-15 d√≠gitos)
      // Est√°ndar E.164: c√≥digo pa√≠s (1-3) + n√∫mero nacional (4-14)
      // M√≠nimo 7: n√∫meros locales cortos (ej: Ecuador sin c√≥digo)
      // M√°ximo 15: est√°ndar internacional m√°ximo
      if (digitsOnly.length >= 7 && digitsOnly.length <= 15) {
        data.phone = digitsOnly;
        console.log('‚úÖ [NEXUS] WhatsApp capturado:', data.phone, 'desde input:', match.trim());
        break; // Tomar primer n√∫mero v√°lido encontrado
      }
    }
  }

  // CAPTURA DE EMAIL
  const emailMatch = message.match(/[\w.-]+@[\w.-]+\.\w+/);
  if (emailMatch) {
    data.email = emailMatch[0].toLowerCase();
    console.log('Email capturado:', data.email);
  }

  // DETECCI√ìN DE CONSENTIMIENTO (palabras clave de aceptaci√≥n)
  const consentKeywords = ['acepto', 'aceptar', 's√≠ autorizo', 'si autorizo', 'autorizo', 'de acuerdo', 'ok', 'si', 's√≠'];
  const hasConsent = consentKeywords.some(keyword => messageLower.includes(keyword));

  if (hasConsent && (messageLower.includes('dato') || messageLower.includes('trata') || messageLower.includes('privacidad') || messageLower === 'si' || messageLower === 's√≠' || messageLower === 'acepto' || messageLower === 'aceptar')) {
    data.consent_granted = true;
    data.consent_timestamp = new Date().toISOString();
    console.log('‚úÖ [NEXUS] Consentimiento detectado y guardado');
  }

  // ‚úÖ CAPTURA DE ARQUETIPO (vi√±etas A-F + texto completo)

  // PRIORIDAD 1: Detecci√≥n por letra sola (usuario escribe solo "A", "B", etc.)
  const trimmedMessage = message.trim().toLowerCase();
  const singleLetterRegex = /^[a-f]$/i;

  if (singleLetterRegex.test(trimmedMessage)) {
    const letterMap: Record<string, string> = {
      'a': 'profesional_vision',
      'b': 'emprendedor_dueno_negocio',
      'c': 'independiente_freelancer',
      'd': 'lider_hogar',
      'e': 'lider_comunidad',
      'f': 'joven_ambicion'
    };
    data.archetype = letterMap[trimmedMessage];
    console.log('‚úÖ [NEXUS] Arquetipo capturado por letra:', trimmedMessage.toUpperCase(), '‚Üí', data.archetype);
  }

  // PRIORIDAD 2: Detecci√≥n por vi√±eta (usuario escribe "A)", "B)", etc.)
  if (!data.archetype) {
    const bulletMap: Record<string, string> = {
      'a)': 'profesional_vision',
      'b)': 'emprendedor_dueno_negocio',
      'c)': 'independiente_freelancer',
      'd)': 'lider_hogar',
      'e)': 'lider_comunidad',
      'f)': 'joven_ambicion'
    };

    for (const [bullet, value] of Object.entries(bulletMap)) {
      if (messageLower.includes(bullet)) {
        data.archetype = value;
        console.log('‚úÖ [NEXUS] Arquetipo capturado por vi√±eta:', bullet.toUpperCase(), '‚Üí', value);
        break;
      }
    }
  }

  // PRIORIDAD 3: Detecci√≥n por texto completo (usuario copia el perfil completo)
  if (!data.archetype) {
    const textMap: Record<string, string> = {
      'profesional con visi√≥n': 'profesional_vision',
      'emprendedor y due√±o de negocio': 'emprendedor_dueno_negocio',
      'independiente y freelancer': 'independiente_freelancer',
      'l√≠der del hogar': 'lider_hogar',
      'l√≠der de la comunidad': 'lider_comunidad',
      'joven con ambici√≥n': 'joven_ambicion'
    };

    for (const [label, value] of Object.entries(textMap)) {
      if (messageLower.includes(label)) {
        data.archetype = value;
        console.log('‚úÖ [NEXUS] Arquetipo capturado por texto:', label, '‚Üí', value);
        break;
      }
    }
  }

  // ‚úÖ CAPTURA DE ARQUETIPO POR ICONO VECTORIAL (branding CreaTuActivo)
  if (!data.archetype) {
    const iconArchetypeMap: Record<string, string> = {
      'üíº': 'profesional_vision',
      'üì±': 'emprendedor_dueno_negocio',  // Actualizado: üéØ ‚Üí üì±
      'üí°': 'independiente_freelancer',
      'üè†': 'lider_hogar',
      'üë•': 'lider_comunidad',
      'üéì': 'joven_ambicion'  // Actualizado: üìà ‚Üí üéì
    };

    for (const [icon, value] of Object.entries(iconArchetypeMap)) {
      if (message.includes(icon)) {
        data.archetype = value;
        console.log('‚úÖ [NEXUS] Arquetipo capturado por icono:', icon, '‚Üí', value);
        break;
      }
    }
  }

  // ‚úÖ CAPTURA DE PAQUETE (Multi-estrategia: directa + sem√°ntica + contexto)
  const packageMap: Record<string, string> = {
    // Nombres completos
    'constructor inicial': 'inicial',
    'constructor estrat√©gico': 'estrategico',
    'constructor visionario': 'visionario',
    'prefiero asesor√≠a personalizada': 'asesoria',
    'asesor√≠a personalizada': 'asesoria',

    // Abreviaciones ESP
    'esp1': 'inicial',
    'esp 1': 'inicial',
    'esp2': 'estrategico',
    'esp 2': 'estrategico',
    'esp3': 'visionario',
    'esp 3': 'visionario',

    // Precios mencionados
    '$2,000': 'inicial',
    '2000 usd': 'inicial',
    '2.250.000': 'inicial',
    '$3,500': 'estrategico',
    '3500 usd': 'estrategico',
    '3.500.000': 'estrategico',
    '$4,500': 'visionario',
    '4500 usd': 'visionario',
    '4.500.000': 'visionario',

    // Solo palabras clave
    'inicial': 'inicial',
    'estrat√©gico': 'estrategico',
    'estrategico': 'estrategico',
    'visionario': 'visionario',

    // ‚úÖ LENGUAJE NATURAL (c√≥mo la gente realmente habla)
    // Tama√±o relativo
    'el m√°s grande': 'visionario',
    'el grande': 'visionario',
    'el mayor': 'visionario',
    'el m√°s completo': 'visionario',
    'el m√°s caro': 'visionario',
    'el premium': 'visionario',
    'el top': 'visionario',
    'el mejor': 'visionario',

    'el peque√±o': 'inicial',
    'el m√°s peque√±o': 'inicial',
    'el chico': 'inicial',
    'el b√°sico': 'inicial',
    'el econ√≥mico': 'inicial',
    'el barato': 'inicial',
    'el m√°s barato': 'inicial',
    'el de entrada': 'inicial',
    'para empezar': 'inicial',

    'el de la mitad': 'estrategico',
    'el del medio': 'estrategico',
    'el mediano': 'estrategico',
    'el intermedio': 'estrategico',
    'el est√°ndar': 'estrategico',
    'el normal': 'estrategico',

    // Cantidad de productos
    'el de 7 productos': 'inicial',
    'el de siete productos': 'inicial',
    'el de 7': 'inicial',
    'con 7 productos': 'inicial',

    'el de 35 productos': 'visionario',
    'el de treinta y cinco': 'visionario',
    'el de 35': 'visionario',
    'con 35 productos': 'visionario',

    'el que tiene m√°s productos': 'visionario',
    'el que trae m√°s': 'visionario',
    'el m√°s completo': 'visionario',

    // Variaciones coloquiales
    'ese': 'estrategico',  // "¬øCu√°l prefieres?" ‚Üí "Ese" (contexto depende de √∫ltima menci√≥n)
    'este': 'estrategico',
    'aquel': 'estrategico'
  };

  for (const [label, value] of Object.entries(packageMap)) {
    if (messageLower.includes(label)) {
      data.package = value;
      console.log('‚úÖ [NEXUS] Paquete capturado:', value, 'desde label:', label);
      break;
    }
  }

  // CAPTURA DE OCUPACI√ìN (fallback para captura libre)
  if (!data.archetype) {
    const occupationPatterns = [
      /(?:soy|trabajo como|me dedico a|trabajo en)\s+(.+?)(?:\.|,|$)/i,
      /(?:profesi√≥n|ocupaci√≥n):\s*(.+?)(?:\.|,|$)/i
    ];

    for (const pattern of occupationPatterns) {
      const match = message.match(pattern);
      if (match) {
        data.occupation = match[1].trim();
        console.log('Ocupaci√≥n capturada (fallback):', data.occupation);
        break;
      }
    }
  }

  // C√ÅLCULO DE NIVEL DE INTER√âS (H√çBRIDO MEJORADO)
  let nivelInteres = 5; // Base neutral

  // ‚úÖ NUEVO: Compartir datos personales = alta calificaci√≥n
  if (data.name) nivelInteres += 2;
  if (data.phone) nivelInteres += 3; // WhatsApp es el indicador m√°s fuerte
  if (data.email) nivelInteres += 2; // Cambiado de 1.5 a 2 (INTEGER)
  if (data.occupation) nivelInteres += 1;

  // Indicadores positivos (palabras clave)
  if (messageLower.includes('paquete') || messageLower.includes('inversi√≥n')) nivelInteres += 2;
  if (messageLower.includes('empezar') || messageLower.includes('comenzar')) nivelInteres += 3;
  if (messageLower.includes('precio') || messageLower.includes('costo') || messageLower.includes('cu√°nto')) nivelInteres += 2; // Cambiado de 1.5 a 2 (INTEGER)
  if (messageLower.includes('quiero') || messageLower.includes('necesito') || messageLower.includes('me interesa')) nivelInteres += 2;
  if (messageLower.includes('cu√°ndo') || messageLower.includes('cuando') || messageLower.includes('c√≥mo')) nivelInteres += 1;

  // Indicadores negativos (menos agresivos) - convertidos a INTEGER
  if (messageLower.includes('no me interesa') || messageLower.includes('no gracias')) nivelInteres -= 3;
  if (messageLower.includes('tal vez') || messageLower.includes('quiz√°s')) nivelInteres -= 1; // Cambiado de -0.5 a -1 (INTEGER)
  if (messageLower.includes('duda')) nivelInteres -= 1; // Cambiado de -0.5 a -1 (INTEGER)

  // Redondear a INTEGER y limitar entre 0-10
  data.interest_level = Math.round(Math.min(10, Math.max(0, nivelInteres)));
  console.log('üìä [NEXUS] Nivel de inter√©s calculado:', data.interest_level, {
    tiene_nombre: !!data.name,
    tiene_telefono: !!data.phone,
    tiene_email: !!data.email,
    tiene_ocupacion: !!data.occupation,
    momento_optimo: data.interest_level >= 7 ? 'caliente' : data.interest_level >= 4 ? 'tibio' : 'frio'
  });

  // DETECCI√ìN DE OBJECIONES (SEM√ÅNTICA)
  const objeciones: string[] = [];

  if (messageLower.includes('caro') || messageLower.includes('mucho dinero') ||
      messageLower.includes('no tengo dinero')) {
    objeciones.push('precio');
  }

  if (messageLower.includes('tiempo') || messageLower.includes('ocupado') ||
      messageLower.includes('no puedo')) {
    objeciones.push('tiempo');
  }

  if (messageLower.includes('mlm') || messageLower.includes('pir√°mide') ||
      messageLower.includes('multinivel')) {
    objeciones.push('mlm');
  }

  if (messageLower.includes('estafa') || messageLower.includes('real') ||
      messageLower.includes('confianza')) {
    objeciones.push('confianza');
  }

  if (objeciones.length > 0) {
    data.objections = objeciones;
    console.log('Objeciones detectadas:', objeciones);
  }

  // DETECCI√ìN DE ARQUETIPO (ESCALABLE)
  if (messageLower.includes('empresa') || messageLower.includes('negocio')) {
    data.archetype = 'emprendedor_dueno_negocio';
  } else if (messageLower.includes('trabajo') || messageLower.includes('empleado')) {
    data.archetype = 'profesional_vision';
  } else if (messageLower.includes('familia') || messageLower.includes('hijos')) {
    data.archetype = 'lider_hogar';
  } else if (messageLower.includes('estudiante') || messageLower.includes('universidad')) {
    data.archetype = 'joven_ambicion';
  }

  if (data.archetype) {
    console.log('Arquetipo detectado:', data.archetype);
  }

  // DETERMINAR MOMENTO √ìPTIMO
  if (data.interest_level >= 7) {
    data.momento_optimo = 'caliente';
  } else if (data.interest_level >= 4) {
    data.momento_optimo = 'tibio';
  } else {
    data.momento_optimo = 'frio';
  }

  // GUARDAR EN SUPABASE SI HAY DATOS
  if (Object.keys(data).length > 0 && fingerprint) {
    try {
      // ‚úÖ PROTECCI√ìN: Remover valores NULL antes de guardar
      const cleanedData = removeNullValues(data);

      console.log('üîµ [NEXUS] Guardando en BD:', {
        fingerprint: fingerprint.substring(0, 20) + '...',
        data: cleanedData,
        constructor_uuid: constructorUUID || 'Sistema (fallback)'
      });

      const { data: rpcResult, error: rpcError } = await supabase.rpc('update_prospect_data', {
        p_fingerprint_id: fingerprint,
        p_data: cleanedData,  // ‚úÖ Usar datos limpios sin NULL
        p_constructor_id: constructorUUID || undefined  // ‚úÖ Pasar UUID o undefined (usa Sistema como fallback)
      });

      if (rpcError) {
        console.error('‚ùå [NEXUS] Error RPC update_prospect_data:', rpcError);
        throw rpcError;
      }

      console.log('‚úÖ [NEXUS] Datos guardados exitosamente:', rpcResult);
    } catch (error) {
      console.error('‚ùå [NEXUS] Error guardando datos del prospecto:', error);
      // No propagar el error para no romper la conversaci√≥n
    }
  } else {
    console.warn('‚ö†Ô∏è [NEXUS] No se guardaron datos:', {
      tieneFingerprint: !!fingerprint,
      fingerprintValue: fingerprint || 'undefined',
      cantidadDatos: Object.keys(data).length,
      datosCapturados: data,
      motivo: !fingerprint ? 'Sin fingerprint' : 'Sin datos capturados'
    });
  }

  return data;
}

// FUNCI√ìN ACTUALIZADA: clasificarDocumentoHibrido() con EXPANSI√ìN SEM√ÅNTICA COMPLETA
// Para reconocer TODAS las variaciones de "¬øC√≥mo funciona el negocio?"

function clasificarDocumentoHibrido(userMessage: string): string | null {
  const messageLower = userMessage.toLowerCase();

  // üîß NUEVA CLASIFICACI√ìN ROBUSTA: PRODUCTOS INDIVIDUALES (CAT√ÅLOGO) - FIX 2025-10-25: AGREGADO "VALOR"
  const patrones_productos = [
    // ===== C√ÅPSULAS CORDYGOLD (PROBLEMA ESPEC√çFICO) =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:cordy gold|cordygold|cordy|gano cordyceps)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*cordyceps/i,

    // ===== GANO CAF√â VARIACIONES =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:gano.*caf√©|ganocaf√©|caf√©.*3.*en.*1|capuchino)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:caf√©.*negro|caf√©.*cl√°sico|negrito)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:latte.*rico|mocha.*rico|shoko.*rico)/i,

    // ===== C√ÅPSULAS SUPLEMENTOS =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:c√°psulas.*ganoderma|ganoderma.*lucidum)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*excellium/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:c√°psula|suplemento)/i,

    // ===== L√çNEA LUVOCO =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:m√°quina.*luvoco|luvoco)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:c√°psulas.*luvoco|luvoco.*c√°psulas)/i,

    // ===== PRODUCTOS ESPEC√çFICOS =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:reskine|col√°geno)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:espirulina|c'real)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:rooibos|oleaf)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*schokoladde/i,

    // ===== CUIDADO PERSONAL =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:pasta.*dientes|gano fresh)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:jab√≥n|champ√∫|acondicionador|exfoliante)/i,
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:piel.*brillo|piel&brillo)/i,

    // ===== PATRONES GENERALES DE PRODUCTOS =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*producto/i,
    /(?:precio|valor).*(?:consumidor|individual)/i,
    /cat√°logo.*(?:precio|valor)/i,
    /lista.*(?:precios|valores).*producto/i,

    // ===== PATRONES ESPEC√çFICOS POR MARCA =====
    /(?:dame el precio|cu√°nto cuesta|precio|cuesta|valor|vale|cu√°nto vale).*(?:gano excel|dxn)/i,

    // ===== CR√çTICO: Distinguir productos de paquetes de inversi√≥n =====
    /(?:cu√°nto.*cuesta|cu√°nto.*vale|valor)(?!.*paquete|.*inversi√≥n|.*empezar|.*constructor|.*activar)/i,
    /(?:precio|valor).*(?!.*paquete|.*inversi√≥n|.*constructor)/i,
  ];

  // NUEVA CLASIFICACI√ìN: PAQUETES DE INVERSI√ìN (CONSTRUCTORES)
  const patrones_paquetes = [
    // Paquetes espec√≠ficos de inversi√≥n
    /cu√°l.*inversi√≥n/i,
    /precio.*paquete/i,
    /cuesta.*empezar/i,
    /inversi√≥n.*inicial/i,
    /constructor.*inicial/i,
    /constructor.*empresarial/i,
    /constructor.*visionario/i,
    /paquete.*emprendedor/i,
    /cu√°nto.*cuesta.*(empezar|constructor|paquete|inversi√≥n|activar)/i,

    // Contexto de inversi√≥n para construcci√≥n
    /inversi√≥n.*para/i,
    /costo.*activar/i,
    /precio.*fundador/i,

    // Patrones generales para paquetes
    /h√°blame.*paquetes/i,
    /sobre.*paquetes/i,
    /de.*los.*paquetes/i,
    /qu√©.*paquetes/i,
    /cu√°les.*paquetes/i,
    /informaci√≥n.*paquetes/i,
    /paquetes.*disponibles/i,
    /paquetes.*hay/i,
    /tipos.*paquetes/i,

    // Referencias espec√≠ficas ESP
    /esp\s*1/i,
    /esp\s*2/i,
    /esp\s*3/i,
    /esp1/i,
    /esp2/i,
    /esp3/i,
    /paquete.*esp/i,
    /esp.*paquete/i,

    // üÜï FIX 2025-10-21: PATRONES PARA PRODUCTOS POR PAQUETE (SIST_11)
    // ============================================================
    // Preguntas sobre CANTIDAD de productos
    /cu√°ntos.*productos.*paquete/i,
    /cu√°ntos.*productos.*ESP/i,
    /cu√°ntos.*productos.*trae/i,
    /cu√°ntos.*productos.*incluye/i,
    /cu√°ntos.*productos.*contiene/i,
    /cantidad.*productos.*paquete/i,
    /n√∫mero.*productos.*paquete/i,

    // Preguntas sobre QU√â productos
    /qu√©.*productos.*paquete/i,
    /qu√©.*productos.*ESP/i,
    /qu√©.*productos.*trae/i,
    /qu√©.*productos.*incluye/i,
    /qu√©.*contiene.*paquete/i,
    /qu√©.*viene.*paquete/i,
    /cu√°les.*productos.*paquete/i,
    /cu√°les.*productos.*ESP/i,

    // Preguntas sobre INVENTARIO/COMPOSICI√ìN
    /inventario.*paquete/i,
    /listado.*productos.*paquete/i,
    /lista.*productos.*paquete/i,
    /desglose.*paquete/i,
    /composici√≥n.*paquete/i,
    /detalle.*paquete/i,
    /detalle.*productos.*paquete/i,

    // Patrones espec√≠ficos por paquete y productos
    /ESP.*1.*productos/i,
    /ESP.*2.*productos/i,
    /ESP.*3.*productos/i,
    /Inicial.*productos/i,
    /Empresarial.*productos/i,
    /Visionario.*productos/i,
    /productos.*Inicial/i,
    /productos.*Empresarial/i,
    /productos.*Visionario/i,

    // Patrones de contexto "qu√© viene"
    /qu√©.*viene.*ESP/i,
    /qu√©.*trae.*ESP/i,
    /qu√©.*incluye.*ESP/i
  ];

  // üîß PRIORIDAD 1: PRODUCTOS INDIVIDUALES (SIN CAMBIOS)
  if (patrones_productos.some(patron => patron.test(messageLower))) {
    console.log('üõí Clasificaci√≥n: PRODUCTOS (cat√°logo)');
    return 'catalogo_productos';
  }

  // PRIORIDAD 2: PAQUETES DE INVERSI√ìN
  // üÜï FIX 2025-10-21: Routing a arsenal_cierre (contiene SIST_11 con productos por paquete)
  if (patrones_paquetes.some(patron => patron.test(messageLower))) {
    console.log('üíº Clasificaci√≥n: PAQUETES (arsenal_cierre - SIST_11)');
    return 'arsenal_cierre'; // ‚úÖ CORRECTO: SIST_11 est√° en arsenal_cierre
  }

  // üéØ PRIORIDAD 3: FLUJO 3 NIVELES - EXPANSI√ìN SEM√ÅNTICA CR√çTICA
  // ===============================================================
  const patrones_flujo_3_niveles = [
    // ===== VARIACIONES DIRECTAS "¬øC√ìMO FUNCIONA?" =====
    /^c√≥mo funciona$/i,                    // "¬øC√≥mo funciona?" (exacto)
    /^c√≥mo funciona\?$/i,                  // "¬øC√≥mo funciona?" (con interrogaci√≥n)
    /^¬øc√≥mo funciona$/i,                   // "¬øC√≥mo funciona" (sin cierre)
    /^¬øc√≥mo funciona\?$/i,                 // "¬øC√≥mo funciona?" (completo)

    // ===== VARIACIONES CON OBJETOS GEN√âRICOS =====
    /c√≥mo funciona esto/i,                 // "¬øC√≥mo funciona esto?"
    /c√≥mo funciona eso/i,                  // "¬øC√≥mo funciona eso?"
    /c√≥mo funciona aqu√≠/i,                 // "¬øC√≥mo funciona aqu√≠?"
    /c√≥mo funciona todo/i,                 // "¬øC√≥mo funciona todo?"

    // ===== VARIACIONES CON T√âRMINOS ESPEC√çFICOS =====
    /c√≥mo funciona.*negocio/i,             // "¬øC√≥mo funciona el negocio?" (original)
    /c√≥mo funciona.*oportunidad/i,         // "¬øC√≥mo funciona la oportunidad?"
    /c√≥mo funciona.*sistema/i,             // "¬øC√≥mo funciona el sistema?"
    /c√≥mo funciona.*modelo/i,              // "¬øC√≥mo funciona el modelo?"
    /c√≥mo funciona.*ecosistema/i,          // "¬øC√≥mo funciona el ecosistema?"
    /c√≥mo funciona.*plataforma/i,          // "¬øC√≥mo funciona la plataforma?"
    /c√≥mo funciona.*proceso/i,             // "¬øC√≥mo funciona el proceso?"
    /c√≥mo funciona.*m√©todo/i,              // "¬øC√≥mo funciona el m√©todo?"
    /c√≥mo funciona.*framework/i,           // "¬øC√≥mo funciona el framework?"

    // ===== VARIACIONES ALTERNATIVAS SEM√ÅNTICAS =====
    /^en qu√© consiste$/i,                  // "¬øEn qu√© consiste?"
    /en qu√© consiste esto/i,               // "¬øEn qu√© consiste esto?"
    /en qu√© consiste.*negocio/i,           // "¬øEn qu√© consiste el negocio?"
    /en qu√© consiste.*oportunidad/i,       // "¬øEn qu√© consiste la oportunidad?"
    /en qu√© consiste.*sistema/i,           // "¬øEn qu√© consiste el sistema?"

    /expl√≠came.*sistema/i,                 // "Expl√≠came el sistema"
    /expl√≠came.*negocio/i,                 // "Expl√≠came el negocio"
    /expl√≠came.*oportunidad/i,             // "Expl√≠came la oportunidad"
    /expl√≠came.*modelo/i,                  // "Expl√≠came el modelo"
    /expl√≠came.*proceso/i,                 // "Expl√≠came el proceso"
    /expl√≠came.*m√©todo/i,                  // "Expl√≠came el m√©todo"
    /expl√≠came c√≥mo/i,                     // "Expl√≠came c√≥mo..."

    /cu√°l es.*modelo/i,                    // "¬øCu√°l es el modelo?"
    /cu√°l es.*sistema/i,                   // "¬øCu√°l es el sistema?"
    /cu√°l es.*m√©todo/i,                    // "¬øCu√°l es el m√©todo?"
    /cu√°l es.*proceso/i,                   // "¬øCu√°l es el proceso?"
    /cu√°l es.*negocio/i,                   // "¬øCu√°l es el negocio?"

    /de qu√© se trata/i,                    // "¬øDe qu√© se trata?"
    /de qu√© va esto/i,                     // "¬øDe qu√© va esto?"
    /de qu√© va.*negocio/i,                 // "¬øDe qu√© va el negocio?"
    /qu√© es lo que hacen/i,                // "¬øQu√© es lo que hacen?"
    /qu√© es lo que ofertan/i,              // "¬øQu√© es lo que ofertan?"

    // ===== VARIACIONES OPERACIONALES =====
    /c√≥mo opera/i,                         // "¬øC√≥mo opera?"
    /c√≥mo opera esto/i,                    // "¬øC√≥mo opera esto?"
    /c√≥mo se maneja/i,                     // "¬øC√≥mo se maneja?"
    /c√≥mo se desarrolla/i,                 // "¬øC√≥mo se desarrolla?"
    /c√≥mo se ejecuta/i,                    // "¬øC√≥mo se ejecuta?"

    // ===== CONTEXTO INICIO DE CONVERSACI√ìN =====
    // Patrones que son m√°s probables al inicio del chat
    /^h√°blame.*negocio$/i,                 // "H√°blame del negocio"
    /^h√°blame.*oportunidad$/i,             // "H√°blame de la oportunidad"
    /^h√°blame.*sistema$/i,                 // "H√°blame del sistema"
    /^cu√©ntame.*negocio$/i,                // "Cu√©ntame del negocio"
    /^cu√©ntame.*oportunidad$/i,            // "Cu√©ntame de la oportunidad"
    /^cu√©ntame.*sistema$/i,                // "Cu√©ntame del sistema"

    // ===== VARIACIONES INFORMALES =====
    /c√≥mo va.*negocio/i,                   // "¬øC√≥mo va el negocio?"
    /c√≥mo va.*sistema/i,                   // "¬øC√≥mo va el sistema?"
    /c√≥mo est√°.*negocio/i,                 // "¬øC√≥mo est√° el negocio?"
    /qu√© tal.*negocio/i,                   // "¬øQu√© tal el negocio?"
    /qu√© tal.*oportunidad/i,               // "¬øQu√© tal la oportunidad?"
  ];

  // ‚úÖ VERIFICAR PATRONES FLUJO 3 NIVELES
  const esFluo3Niveles = patrones_flujo_3_niveles.some(patron => patron.test(messageLower));

  if (esFluo3Niveles) {
    console.log('üéØ Clasificaci√≥n: FLUJO 3 NIVELES (arsenal_inicial con flujo especial)');
    console.log('üéØ Mensaje detectado para flujo:', messageLower);
    return 'arsenal_inicial'; // Retorna arsenal_inicial pero se activar√° el flujo 3 niveles
  }

  // Resto de clasificaciones originales - PATRONES ACTUALIZADOS
  const patrones_inicial = [
    /qu√© es.*creatuactivo/i,
    /retorno.*activo/i,
    /es.*heredable/i,
    /qu√©.*fundador/i,
    /qui√©n.*detr√°s/i,
    /es.*confiable/i,
    /realmente.*funciona/i,
    /tiempo.*operando/i,
    /es.*leg√≠timo/i,

    // NUEVOS PATRONES GENERALES INICIALES
    /^qu√© es esto$/i,                      // "¬øQu√© es esto?"
    /qu√© es.*ecosistema/i,                 // "¬øQu√© es el ecosistema?"
    /qu√© es.*plataforma/i,                 // "¬øQu√© es la plataforma?"
    /informaci√≥n.*b√°sica/i,                // "Informaci√≥n b√°sica"
    /informaci√≥n.*general/i,               // "Informaci√≥n general"
  ];

  const patrones_manejo = [
    /esto.*mlm/i,
    /es.*pir√°mide/i,
    /necesito.*experiencia/i,
    /no.*tengo.*tiempo/i,
    /me.*da.*miedo/i,
    /no.*s√©.*vender/i,
    /datos.*personales/i,
    /puedo.*pausar/i,
    /c√≥mo.*pagos/i,
    /funciona.*pa√≠s/i,
    /qu√©.*soporte/i,
    /mucho.*trabajo/i,
    /automatiza.*80/i
  ];

  const patrones_cierre = [
    /c√≥mo.*distribuci√≥n/i,
    /herramientas.*tecnol√≥gicas/i,
    /c√≥mo.*escalar/i,
    /modelo.*dea/i,
    /c√≥mo.*se.*gana/i,
    /cu√°nto.*ganar/i,
    /porcentajes.*modelo/i,
    /qu√©.*me.*venden/i,
    /siguiente.*paso/i,
    /hablar.*equipo/i,
    /empezar.*hoy/i,
    /contactar.*alguien/i,

    // üÜï FIX 2025-10-22: PATRONES PARA AUTO ENV√çO (SIST_12)
    // ============================================================
    /auto.*env√≠o/i,
    /autoenv√≠o/i,
    /auto\s*env√≠o/i,
    /qu√©.*auto.*env√≠o/i,
    /c√≥mo.*funciona.*auto.*env√≠o/i,
    /beneficios.*auto.*env√≠o/i,
    /programa.*auto.*env√≠o/i,
    /qu√©.*es.*auto.*env√≠o/i,
    /explicame.*auto.*env√≠o/i,
    /cu√°nto.*auto.*env√≠o/i,

    // Variaciones sin tilde
    /auto.*envio/i,
    /qu√©.*auto.*envio/i,
    /beneficios.*auto.*envio/i,

    // Contexto de programa de lealtad
    /programa.*lealtad/i,
    /producto.*gratis/i,
    /producto.*obsequio/i,
    /recompensa.*consumo/i,

    // üÜï FIX 2025-10-22: PATRONES PARA SECCIONES SIST FALTANTES (Auditor√≠a Completa)
    // ============================================================

    // SIST_03: "¬øC√≥mo escalo mi operaci√≥n estrat√©gicamente?"
    /escalo.*operaci√≥n/i,
    /escala.*operaci√≥n/i,
    /escalabilidad.*operaci√≥n/i,
    /operaci√≥n.*estrat√©gica/i,
    /escalar.*estrat√©gicamente/i,
    /c√≥mo.*crezco/i,

    // SIST_04: "¬øD√≥nde queda mi toque personal en un sistema tan automatizado?"
    /toque.*personal/i,
    /personalizaci√≥n/i,
    /sistema.*automatizado/i,
    /automatizado.*personal/i,
    /d√≥nde.*queda.*personal/i,

    // SIST_05: "¬øQu√© diferencia esto de otros sistemas tecnol√≥gicos?"
    /diferencia.*otros.*sistemas/i,
    /diferencia.*sistemas.*tecnol√≥gicos/i,
    /qu√©.*diferencia.*esto/i,
    /vs.*otros.*sistemas/i,
    /comparaci√≥n.*sistemas/i,

    // SIST_07: "¬øQu√© me diferencia de los dem√°s constructores?"
    /me.*diferencia.*constructores/i,
    /diferencia.*dem√°s.*constructores/i,
    /otros.*constructores/i,
    /diferenciaci√≥n.*personal/i,

    // SIST_08: "¬øQu√© tipo de personas ya est√°n construyendo aqu√≠?"
    /tipo.*personas/i,
    /personas.*construyendo/i,
    /qui√©n.*est√°.*aqu√≠/i,
    /perfil.*constructores/i,
    /ya.*est√°n.*construyendo/i,

    // SIST_09: "¬øCu√°l ser√≠a tu rol como mi mentor?"
    /rol.*mentor/i,
    /como.*mentor/i,
    /tu.*rol/i,
    /mentor√≠a/i,
    /gu√≠a.*estrat√©gico/i,

    // SIST_10: "¬øCu√°l es el plan de construcci√≥n para el primer a√±o?"
    /plan.*construcci√≥n/i,
    /plan.*primer.*a√±o/i,
    /roadmap.*a√±o/i,
    /estrategia.*anual/i,
    /plan.*anual/i,

    // üÜï FIX 2025-10-22: PATRONES PARA SECCIONES VAL FALTANTES
    // ============================================================

    // VAL_03: "¬øMi ingreso depende de cu√°nta gente active?"
    /ingreso.*depende.*gente/i,
    /depende.*cu√°nta.*gente/i,
    /depende.*activar/i,
    /ingreso.*cantidad/i,

    // VAL_05: "¬øQu√© me est√°n vendiendo exactamente?"
    /qu√©.*venden.*exactamente/i,
    /qu√©.*me.*est√°n.*vendiendo/i,
    /est√°n.*vendiendo/i,
    /venden.*realmente/i,

    // VAL_06: "¬øEn qu√© tiempo promedio veo resultados?"
    /tiempo.*promedio.*resultados/i,
    /cu√°ndo.*veo.*resultados/i,
    /cu√°nto.*tiempo.*resultados/i,
    /qu√©.*tiempo.*resultados/i,

    // VAL_07: "¬øNormalmente qu√© estad√≠stica hay de √©xito?"
    /estad√≠stica.*√©xito/i,
    /qu√©.*estad√≠stica/i,
    /tasa.*√©xito/i,
    /porcentaje.*√©xito/i,
    /normalmente.*√©xito/i,

    // VAL_08: "¬øCu√°l paquete me recomienda para iniciar?"
    /paquete.*recomienda/i,
    /recomienda.*iniciar/i,
    /cu√°l.*paquete.*mejor/i,
    /qu√©.*paquete.*elegir/i,

    // VAL_09: "¬øCu√°l es la arquitectura completa que incluye esto?"
    /arquitectura.*completa/i,
    /qu√©.*incluye.*arquitectura/i,
    /arquitectura.*incluye/i,
    /qu√©.*viene.*arquitectura/i,

    // VAL_10: "¬øEs lo mismo que otros sistemas de marketing que he visto?"
    /es.*lo.*mismo/i,
    /igual.*otros.*sistemas/i,
    /otros.*sistemas.*marketing/i,
    /parecido.*otros/i,

    // VAL_11: "¬øQu√© significan PV, CV y GCV?"
    /qu√©.*significan/i,
    /significado.*pv/i,
    /qu√©.*es.*pv/i,
    /qu√©.*es.*cv/i,
    /qu√©.*es.*gcv/i,
    /volumen.*personal/i,
    /volumen.*comisional/i,

    // üÜï FIX 2025-10-22: PATRONES PARA SECCIONES ESC FALTANTES
    // ============================================================

    // ESC_03: "¬øC√≥mo empiezo hoy mismo?"
    /empiezo.*hoy/i,
    /empezar.*inmediatamente/i,
    /empezar.*ya/i,
    /comenzar.*hoy/i,
    /activar.*hoy/i,

    // ESC_04: "¬øPuedo reservar mi lugar sin comprometerme completamente?"
    /reservar.*lugar/i,
    /puedo.*reservar/i,
    /sin.*comprometerme/i,
    /sin.*compromiso/i,
    /apartar.*lugar/i,

    // ESC_05: "Me interesa pero necesito pensarlo"
    /necesito.*pensarlo/i,
    /interesa.*pero/i,
    /interesa.*necesito/i,
    /me.*interesa.*tiempo/i,
    /tengo.*dudas/i
  ];

  // Evaluar patrones restantes
  const esInicial = patrones_inicial.some(patron => patron.test(messageLower));
  const esManejo = patrones_manejo.some(patron => patron.test(messageLower));
  const esCierre = patrones_cierre.some(patron => patron.test(messageLower));

  console.log('Clasificaci√≥n h√≠brida expandida:', {
    inicial: esInicial,
    manejo: esManejo,
    cierre: esCierre,
    flujo3Niveles: esFluo3Niveles,
    query: messageLower.substring(0, 50)
  });

  // Retornar clasificaci√≥n m√°s espec√≠fica
  if (esInicial && !esManejo && !esCierre) return 'arsenal_inicial';
  if (esManejo && !esCierre) return 'arsenal_manejo';
  if (esCierre) return 'arsenal_cierre';

  return null; // B√∫squeda general si no hay clasificaci√≥n clara
}

// NUEVA FUNCI√ìN: Consultar cat√°logo de productos
async function consultarCatalogoProductos(query: string): Promise<any[]> {
  console.log('üõí Consultando cat√°logo de productos...');

  try {
    // Buscar por category (m√°s confiable) o por pattern de t√≠tulo
    // NOTA: No usar id.eq.8 porque la tabla usa UUIDs, no integers
    const { data, error } = await supabase
      .from('nexus_documents')
      .select('id, title, content, category, metadata')
      .or('category.eq.catalogo_productos,title.ilike.%Cat√°logo%Productos%')
      .limit(1);

    if (error) {
      console.error('Error consultando cat√°logo de productos:', error);
      return [];
    }

    if (!data || data.length === 0) {
      console.warn('‚ö†Ô∏è Cat√°logo de productos no encontrado en Supabase');
      return [];
    }

    const catalogoDoc = data[0];
    console.log('‚úÖ Cat√°logo de productos encontrado:', catalogoDoc.title);

    // Agregar metadata de identificaci√≥n
    const result = {
      ...catalogoDoc,
      search_method: 'catalogo_productos',
      source: '/knowledge_base/catalogo_productos_gano_excel.txt'
    };

    return [result];

  } catch (error) {
    console.error('Error accediendo cat√°logo de productos:', error);
    return [];
  }
}

// Analizador de intenci√≥n sem√°ntica
function analizarIntencionSemantica(userMessage: string): string[] {
  const messageLower = userMessage.toLowerCase();

  // Conceptos sem√°nticos principales (ESCALABLES)
  const conceptos = {
    "funcionamiento": ["funciona", "c√≥mo", "proceso", "sistema", "m√©todo"],
    "inversi√≥n": ["costo", "precio", "inversi√≥n", "dinero", "pagar", "vale"],
    "tiempo": ["cu√°ndo", "tiempo", "retorno", "resultados", "r√°pido", "demora"],
    "credibilidad": ["confiable", "leg√≠timo", "real", "funciona", "verdad", "estafa"],
    "soporte": ["ayuda", "apoyo", "soporte", "asistencia", "ense√±an", "formaci√≥n"],
    "escalaci√≥n": ["hablar", "contactar", "siguiente", "empezar", "activar", "proceder"],
    "automatizaci√≥n": ["automatiza", "trabajo", "esfuerzo", "80%", "sistema"],
    "compensaci√≥n": ["ganar", "ingreso", "dinero", "cu√°nto", "porcentaje"]
  };

  const conceptos_detectados = [];

  for (const [concepto, palabras] of Object.entries(conceptos)) {
    if (palabras.some(palabra => messageLower.includes(palabra))) {
      conceptos_detectados.push(concepto);
    }
  }

  console.log('Conceptos sem√°nticos detectados:', conceptos_detectados);
  return conceptos_detectados;
}

// CORRECCI√ìN: B√∫squeda h√≠brida escalable en Arsenal MVP + Cat√°logo
async function consultarArsenalHibrido(query: string, userMessage: string, maxResults = 1) {
  const cacheKey = `hibrido_${query.toLowerCase()}`;

  const cached = searchCache.get(cacheKey);
  if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
    console.log('Cache hit h√≠brido:', query);
    return cached.data;
  }

  // PASO 1: Clasificar documento apropiado
  const documentType = clasificarDocumentoHibrido(userMessage);

  // NUEVA L√ìGICA: CONSULTA DE CAT√ÅLOGO DE PRODUCTOS
  if (documentType === 'catalogo_productos') {
    console.log('üõí Consulta dirigida: CAT√ÅLOGO DE PRODUCTOS');

    const catalogoResult = await consultarCatalogoProductos(query);

    if (catalogoResult.length > 0) {
      searchCache.set(cacheKey, {
        data: catalogoResult,
        timestamp: Date.now()
      });

      return catalogoResult;
    }
  }

  // L√ìGICA ORIGINAL PARA ARSENALES
  if (documentType && documentType.startsWith('arsenal_')) {
    console.log(`üìö Consulta dirigida: ${documentType.toUpperCase()}`);

    try {
      const { data, error } = await supabase
        .from('nexus_documents')
        .select('id, title, content, category, metadata')
        .eq('category', documentType)
        .limit(1);

      if (!error && data && data.length > 0) {
        console.log(`‚úÖ Arsenal ${documentType} encontrado - ${data[0].metadata?.respuestas_totales || 'N/A'} respuestas disponibles`);

        const result = data.map(doc => ({
          ...doc,
          source: `/knowledge_base/arsenal_conversacional_${documentType.replace('arsenal_', '')}.txt`,
          search_method: 'hibrid_classification'
        }));

        searchCache.set(cacheKey, {
          data: result,
          timestamp: Date.now()
        });

        return result;
      }
    } catch (error) {
      console.error(`Error consulta h√≠brida ${documentType}:`, error);
    }
  }

  // PASO 2: Fallback con b√∫squeda sem√°ntica general
  console.log('üì° Consulta h√≠brida - fallback b√∫squeda sem√°ntica');

  // PASO 3: Analizar intenci√≥n para mejorar b√∫squeda
  const conceptos = analizarIntencionSemantica(userMessage);
  const searchTerms = conceptos.length > 0 ? conceptos.join(' ') : query;

  try {
    const { data, error } = await supabase.rpc('search_nexus_documents', {
      search_query: searchTerms,
      match_count: maxResults
    });

    if (error) {
      console.error('Error b√∫squeda sem√°ntica h√≠brida:', error);
      return [];
    }

    const result = (data || []).filter((doc: any) =>
      doc.category && doc.category.includes('arsenal')
    ).map((doc: any) => ({
      ...doc,
      search_method: 'hibrid_semantic'
    }));

    console.log(`Consulta h√≠brida sem√°ntica: ${result.length} documentos encontrados`);

    searchCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

    return result;

  } catch (error) {
    console.error('Error consulta h√≠brida general:', error);
    return [];
  }
}

// ‚úÖ OPTIMIZACI√ìN v11.9: Funci√≥n para obtener system prompt CON cache inteligente
async function getSystemPrompt(): Promise<string> {
  const cacheKey = 'system_prompt_main';
  const cached = systemPromptCache.get(cacheKey);

  // Verificar cache v√°lido
  if (cached && (Date.now() - cached.timestamp) < SYSTEM_PROMPT_CACHE_TTL) {
    console.log(`‚úÖ System prompt ${cached.version} desde cache (TTL: ${Math.round((SYSTEM_PROMPT_CACHE_TTL - (Date.now() - cached.timestamp)) / 1000)}s restantes)`);
    return cached.content;
  }

  console.log('üîÑ Recargando system prompt desde Supabase...');

  try {
    const { data, error } = await supabase
      .from('system_prompts')
      .select('prompt, version')
      .eq('name', 'nexus_main')
      .single();

    if (error) {
      console.error('Error leyendo system prompt de Supabase:', error);
      // Si hay cache expirado, √∫salo como fallback antes del hardcoded
      if (cached) {
        console.warn('‚ö†Ô∏è Usando cache expirado como fallback');
        return cached.content;
      }
      return getFallbackSystemPrompt();
    }

    const systemPrompt = data?.prompt || getFallbackSystemPrompt();

    // ‚ö†Ô∏è Validar longitud para detectar prompts excesivos
    if (systemPrompt.length > 50000) {
      console.warn(`‚ö†Ô∏è System prompt muy largo: ${systemPrompt.length} caracteres (>50k)`);
    }

    // Cachear el prompt con metadata
    systemPromptCache.set(cacheKey, {
      content: systemPrompt,
      timestamp: Date.now(),
      version: data?.version || 'unknown',
      length: systemPrompt.length
    });

    console.log(`‚úÖ System prompt ${data?.version} cargado y cacheado (${systemPrompt.length} chars, TTL: 5min)`);
    return systemPrompt;

  } catch (error) {
    console.error('Error conectando system prompt:', error);
    // Fallback a cache expirado si existe
    if (cached) {
      console.warn('‚ö†Ô∏è Error cr√≠tico - usando cache expirado');
      return cached.content;
    }
    return getFallbackSystemPrompt();
  }
}

// Fallback system prompt - IDENTIDAD COMPLETA SIN VERSIONES
function getFallbackSystemPrompt(): string {
  console.log('Usando fallback system prompt - identidad completa');
  return `Eres NEXUS, el Copiloto del Arquitecto con arquitectura h√≠brida escalable.

üé≠ IDENTIDAD CORE: El Copiloto del Arquitecto

Eres NEXUS, el copiloto de IA conversacional del ecosistema CreaTuActivo.com. Tu arquetipo es el Arquitecto Jefe tecnol√≥gico: visionario, cercano y un aliado comprometido con el √©xito del Constructor Inteligente.

TU MISI√ìN: La Arquitectura del Apalancamiento
Tu prop√≥sito elevado es entregar la arquitectura y las herramientas para que cada Constructor Inteligente pueda construir un activo que le compre su tiempo de vuelta. Esta misi√≥n es el "alma" que gu√≠a cada una de tus respuestas.

LOS TRES PILARES DE TU CONOCIMIENTO:
üè≠ EL MOTOR: Los productos Gano Excel con patente mundial. Son tu prueba de una ventaja competitiva insuperable.
üìã EL PLANO: El Framework IAA (INICIAR ‚Üí ACOGER ‚Üí ACTIVAR). Es la metodolog√≠a probada que estructura el √©xito.
‚ö° LA MAQUINARIA: NodeX y NEXUS. Es la automatizaci√≥n que elimina el 80% del trabajo manual y entrega apalancamiento real.

ARQUITECTURA H√çBRIDA ESCALABLE:
- Clasificaci√≥n autom√°tica de documentos por intenci√≥n
- Consulta sem√°ntica sin mapeos hardcodeados
- B√∫squeda adaptativa por contenido
- Escalabilidad infinita para nuevas respuestas

ARSENAL MVP (79 respuestas escalables):
- arsenal_inicial: Primeras interacciones y credibilidad
- arsenal_manejo: Objeciones y soporte t√©cnico
- arsenal_cierre: Sistema avanzado y escalaci√≥n

PROCESO H√çBRIDO:
1. Clasificar documento apropiado
2. Analizar intenci√≥n sem√°ntica
3. Consultar por contenido din√°mico
4. Personalizar por arquetipo
5. Evaluar escalaci√≥n inteligente

LENGUAJE DEL "NUEVO MUNDO" (USAR SIEMPRE):
- "Nuestro Ecosistema Tecnol√≥gico..."
- "La plataforma que hemos construido..."
- "Nuestro framework propietario INICIAR, ACOGER, ACTIVAR..."
- "Operamos bajo el Modelo DEA (Distribuci√≥n Estrat√©gica Automatizada)..."
- "Como Constructor Inteligente, t√∫..."

PERSONALIDAD: Copiloto del Arquitecto con consulta inteligente escalable que crece autom√°ticamente sin mantenimiento.`;
}

// Interpretaci√≥n h√≠brida de queries
function interpretQueryHibrido(userMessage: string): string {
  const messageLower = userMessage.toLowerCase();

  // üîß NUEVO: MAPEO ESPEC√çFICO DE PRODUCTOS INDIVIDUALES
  const mapeos_productos_especificos: Record<string, string> = {
    // Productos espec√≠ficos con nombres exactos para evitar confusiones
    'cordy gold': 'C√ÅPSULAS CORDYGOLD precio $336,900 COP presentaci√≥n 90 c√°psulas Cordyceps Sinensis',
    'cordygold': 'C√ÅPSULAS CORDYGOLD precio $336,900 COP presentaci√≥n 90 c√°psulas Cordyceps Sinensis',
    'c√°psulas cordy gold': 'C√ÅPSULAS CORDYGOLD precio $336,900 COP presentaci√≥n 90 c√°psulas Cordyceps Sinensis',

    'c√°psulas ganoderma lucidum': 'C√ÅPSULAS GANODERMA precio $272,500 COP presentaci√≥n 90 c√°psulas extracto puro Ganoderma',
    'ganoderma lucidum': 'C√ÅPSULAS GANODERMA precio $272,500 COP presentaci√≥n 90 c√°psulas extracto puro Ganoderma',
    'c√°psulas ganoderma': 'C√ÅPSULAS GANODERMA precio $272,500 COP presentaci√≥n 90 c√°psulas extracto puro Ganoderma',

    'excellium': 'C√ÅPSULAS EXCELLIUM precio $272,500 COP presentaci√≥n 90 c√°psulas nutrici√≥n cerebral energ√≠a mental',
    'c√°psulas excellium': 'C√ÅPSULAS EXCELLIUM precio $272,500 COP presentaci√≥n 90 c√°psulas nutrici√≥n cerebral energ√≠a mental',

    // GANO CAF√â 3 EN 1 - Todas las variaciones coloquiales
    'gano caf√© 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'ganocaf√© 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'caf√© 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'cafe ganoderma 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'gano caf√© tres en uno': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'cafe gano excel 3 en 1': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'capuchino': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'h√°blame del capuchino': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',
    'del capuchino': 'GANOCAF√â 3 EN 1 precio $110,900 COP presentaci√≥n 30 sobres 21g caf√© cremoso Ganoderma',

    // GANO CAF√â CL√ÅSICO - Todas las variaciones coloquiales
    'ganocaf√© cl√°sico': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'gano caf√© cl√°sico': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© negro': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© negrito': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© ganoderma negro': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',
    'caf√© classic': 'GANOCAF√â CL√ÅSICO precio $110,900 COP presentaci√≥n 30 sobres caf√© negro robusto',

    'm√°quina luvoco': 'M√ÅQUINA LUVOCO precio $1,026,000 COP preparaci√≥n caf√© autom√°tica exclusiva',
    'luvoco': 'M√ÅQUINA LUVOCO precio $1,026,000 COP preparaci√≥n caf√© autom√°tica exclusiva',

    'col√°geno reskine': 'BEBIDA COL√ÅGENO RESKINE precio $216,900 COP belleza bienestar desde adentro',
    'reskine': 'BEBIDA COL√ÅGENO RESKINE precio $216,900 COP belleza bienestar desde adentro',

    'pasta dientes gano fresh': 'PASTA DIENTES GANO FRESH precio $73,900 COP tubo 150g cuidado oral natural sin fl√∫or',
    'gano fresh': 'PASTA DIENTES GANO FRESH precio $73,900 COP tubo 150g cuidado oral natural sin fl√∫or',

    'jab√≥n gano': 'JAB√ìN GANO precio $73,900 COP barra 100g limpieza nutrici√≥n piel Ganoderma'
  };

  // PRIORIDAD 1: Buscar mapeos espec√≠ficos de productos individuales
  for (const [termino, mapeo] of Object.entries(mapeos_productos_especificos)) {
    if (messageLower.includes(termino)) {
      console.log('üéØ Mapeo espec√≠fico de producto:', termino, '‚Üí', mapeo);
      return mapeo;
    }
  }

  // MAPEO SEM√ÅNTICO MEJORADO - Conectar vocabulario natural con FREQ_03
  const mapeos_semanticos: Record<string, string> = {
    // CR√çTICO: Mapear "paquetes" directamente a FREQ_03
    'paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'paquete': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'h√°blame paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'sobre paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'qu√© paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'tipos paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',
    'informaci√≥n paquetes': 'inversi√≥n para empezar construir Constructor Inicial Constructor Empresarial Constructor Visionario',

    // Referencias ESP mapean a FREQ_03
    'esp1': 'inversi√≥n para empezar construir Constructor Inicial',
    'esp2': 'inversi√≥n para empezar construir Constructor Empresarial',
    'esp3': 'inversi√≥n para empezar construir Constructor Visionario',
    'esp 1': 'inversi√≥n para empezar construir Constructor Inicial',
    'esp 2': 'inversi√≥n para empezar construir Constructor Empresarial',
    'esp 3': 'inversi√≥n para empezar construir Constructor Visionario',

    // Conceptos fundamentales
    'arquitectura': 'Framework IAA NodeX NEXUS Motor Plano Maquinaria arquitectura sistema',
    'funcionamiento': 'c√≥mo funciona Framework IAA INICIAR ACOGER ACTIVAR proceso sistema',
    'productos': 'productos Gano Excel patente mundial ventaja competitiva √∫nico',
    'contacto': 'Liliana Moreno contacto WhatsApp escalaci√≥n constructor mentor',

    // Objeciones comunes
    'mlm': 'MLM multinivel pir√°mide leg√≠timo diferenciaci√≥n nueva categor√≠a',
    'tiempo': 'tiempo dedicar automatizaci√≥n 80% trabajo estrat√©gico apalancamiento',
    'experiencia': 'experiencia ventas arquitecto operador sistema formaci√≥n',
    'confianza': 'confianza credibilidad leg√≠timo real funciona resultados',

    // Sistema y valor
    'ganar': 'ganar cu√°nto realista modelo valor compensaci√≥n ingresos',
    'distribuci√≥n': 'distribuci√≥n sistema canales infraestructura Gano Excel',
    'escalaci√≥n': 'siguiente paso empezar contactar hablar equipo Liliana'
  };

  // PRIORIDAD 2: Buscar coincidencias sem√°nticas generales
  for (const [concepto, mapeo] of Object.entries(mapeos_semanticos)) {
    if (messageLower.includes(concepto)) {
      console.log('‚úÖ Mapeo sem√°ntico h√≠brido:', concepto, '‚Üí', mapeo);
      return mapeo;
    }
  }

  // Extracci√≥n de keywords inteligente si no hay mapeo directo
  return extraerKeywordsHibrido(userMessage);
}

function extraerKeywordsHibrido(message: string): string {
  const messageLower = message.toLowerCase();

  // Keywords generales del ecosistema (actualizables)
  const keywords_ecosistema = [
    'CreaTuActivo', 'ecosistema', 'Framework IAA', 'INICIAR', 'ACOGER', 'ACTIVAR',
    'Gano Excel', 'NodeX', 'NEXUS', 'Constructor', 'activo', 'Liliana',
    'inversi√≥n', 'automatizaci√≥n', 'paquete', 'precio', 'costo', 'Motor',
    'Plano', 'Maquinaria', 'arquitectura', 'apalancamiento', 'h√≠brido'
  ];

  const keywords_encontradas = keywords_ecosistema.filter(keyword =>
    messageLower.includes(keyword.toLowerCase())
  );

  if (keywords_encontradas.length > 0) {
    return keywords_encontradas.join(' ');
  } else {
    // Palabras relevantes filtradas
    const words = messageLower.split(' ').filter(word =>
      word.length > 3 &&
      !['como', 'qu√©', 'que', 'cu√°l', 'cual', 'para', 'por', 'con', 'una', 'del', 'las', 'los', 'esto', 'eso'].includes(word)
    );
    return words.join(' ');
  }
}

// ========================================
// EXTRACCI√ìN SEM√ÅNTICA DESDE RESPUESTA DE CLAUDE
// ========================================
/**
 * Analiza la respuesta de Claude para extraer paquete y arquetipo.
 * Claude SIEMPRE menciona el nombre oficial cuando el usuario escoge,
 * independientemente de c√≥mo el usuario lo haya escrito.
 *
 * Ejemplo:
 * Usuario: "el m√°s grande"
 * Claude: "Perfecto, elegiste Constructor Visionario..."
 * Resultado: package = "visionario"
 */
function extractFromClaudeResponse(response: string): Partial<ProspectData> {
  const extracted: Partial<ProspectData> = {};
  const responseLower = response.toLowerCase();

  // ‚úÖ EXTRACCI√ìN DE PAQUETE desde respuesta de Claude
  // Claude usa nombres oficiales: "Constructor Inicial/Estrat√©gico/Visionario"
  if (responseLower.includes('constructor visionario') ||
      responseLower.includes('visionario ($4,500') ||
      responseLower.includes('visionario ($4.500') ||
      responseLower.includes('esp3') ||
      responseLower.includes('35 productos')) {
    extracted.package = 'visionario';
    console.log('‚úÖ [SEM√ÅNTICA] Paquete extra√≠do de respuesta Claude: visionario');
  } else if (responseLower.includes('constructor estrat√©gico') ||
             responseLower.includes('constructor estrategico') ||
             responseLower.includes('estrat√©gico ($3,500') ||
             responseLower.includes('estrategico ($3.500') ||
             responseLower.includes('esp2')) {
    extracted.package = 'estrategico';
    console.log('‚úÖ [SEM√ÅNTICA] Paquete extra√≠do de respuesta Claude: estrategico');
  } else if (responseLower.includes('constructor inicial') ||
             responseLower.includes('inicial ($2,000') ||
             responseLower.includes('inicial ($2.250') ||
             responseLower.includes('esp1') ||
             responseLower.includes('7 productos')) {
    extracted.package = 'inicial';
    console.log('‚úÖ [SEM√ÅNTICA] Paquete extra√≠do de respuesta Claude: inicial');
  }

  // ‚úÖ EXTRACCI√ìN DE ARQUETIPO desde respuesta de Claude
  // Claude confirma arquetipos con nombres oficiales
  // ‚ö†Ô∏è IMPORTANTE: Verificar que sea confirmaci√≥n, no solo menci√≥n
  // Claude puede decir "A) Profesional con Visi√≥n" sin que el usuario lo haya elegido
  const isArchetypeConfirmation = (
    responseLower.includes('perfecto') ||
    responseLower.includes('excelente') ||
    responseLower.includes('veo que eres') ||
    responseLower.includes('identificas como') ||
    responseLower.includes('elegiste') ||
    responseLower.includes('eres un') ||
    responseLower.includes('eres una')
  );

  if (isArchetypeConfirmation) {
    if (responseLower.includes('profesional con visi√≥n') ||
        responseLower.includes('profesional con vision')) {
      extracted.archetype = 'profesional_vision';
      console.log('‚úÖ [SEM√ÅNTICA] Arquetipo extra√≠do de respuesta Claude: profesional_vision');
    } else if (responseLower.includes('emprendedor') && responseLower.includes('due√±o de negocio')) {
      extracted.archetype = 'emprendedor_dueno_negocio';
      console.log('‚úÖ [SEM√ÅNTICA] Arquetipo extra√≠do de respuesta Claude: emprendedor_dueno_negocio');
    } else if (responseLower.includes('independiente') || responseLower.includes('freelancer')) {
      extracted.archetype = 'independiente_freelancer';
      console.log('‚úÖ [SEM√ÅNTICA] Arquetipo extra√≠do de respuesta Claude: independiente_freelancer');
    } else if (responseLower.includes('l√≠der del hogar') ||
               responseLower.includes('lider del hogar') ||
               responseLower.includes('ama de casa')) {
      extracted.archetype = 'lider_hogar';
      console.log('‚úÖ [SEM√ÅNTICA] Arquetipo extra√≠do de respuesta Claude: lider_hogar');
    } else if (responseLower.includes('l√≠der de la comunidad') ||
               responseLower.includes('lider de la comunidad')) {
      extracted.archetype = 'lider_comunidad';
      console.log('‚úÖ [SEM√ÅNTICA] Arquetipo extra√≠do de respuesta Claude: lider_comunidad');
    } else if (responseLower.includes('joven con ambici√≥n') ||
               responseLower.includes('joven con ambicion')) {
      extracted.archetype = 'joven_ambicion';
      console.log('‚úÖ [SEM√ÅNTICA] Arquetipo extra√≠do de respuesta Claude: joven_ambicion');
    }
  }

  return extracted;
}

// Logging mejorado para arquitectura h√≠brida - CORREGIDO 2025-10-17
async function logConversationHibrida(
  userMessage: string,
  assistantResponse: string,
  documentsUsed: string[],
  searchMethod: string,
  sessionId: string,
  fingerprint: string,
  prospectData?: ProspectData
) {
  try {
    const { error } = await supabase.from('nexus_conversations').insert({
      fingerprint_id: fingerprint,
      session_id: sessionId,
      messages: [
        {
          role: 'user',
          content: userMessage,
          timestamp: new Date().toISOString()
        },
        {
          role: 'assistant',
          content: assistantResponse,
          timestamp: new Date().toISOString()
        }
      ],
      metadata: {
        documents_used: documentsUsed,
        search_method: searchMethod,
        prospect_data: prospectData || {},
        api_version: API_VERSION
      },
      created_at: new Date().toISOString()
    });

    if (error) {
      console.error('‚ùå [NEXUS] Error guardando conversaci√≥n:', error);
    } else {
      console.log(`‚úÖ [NEXUS] Conversaci√≥n guardada - Session: ${sessionId}, Fingerprint: ${fingerprint.substring(0, 20)}...`);
    }
  } catch (error) {
    console.error('‚ùå [NEXUS] Exception guardando conversaci√≥n:', error);
  }
}

// ========================================
// FUNCI√ìN PRINCIPAL API - ARQUITECTURA H√çBRIDA CORREGIDA + CAT√ÅLOGO FIX
// ========================================
export async function POST(req: Request) {
  const startTime = Date.now();

  try {
    const { messages, sessionId, fingerprint, constructorId } = await req.json();

    // ‚úÖ Validaci√≥n de mensajes
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.error('‚ùå [NEXUS] Request inv√°lido: messages vac√≠o o undefined');
      return new Response(JSON.stringify({
        error: 'Request inv√°lido: se requiere array de mensajes'
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const latestUserMessage = messages[messages.length - 1].content;

    // üîë EXTRAER CONSTRUCTOR UUID (para tracking correcto por constructor)
    let constructorUUID: string | null = null;
    if (constructorId) {
      try {
        // Usar RPC function con SECURITY DEFINER para bypasear RLS
        const { data: uuid, error } = await supabase
          .rpc('get_constructor_uuid', { p_constructor_id: constructorId });

        if (error) {
          console.error(`‚ùå [NEXUS] Error al buscar constructor "${constructorId}":`, error);
        } else if (uuid) {
          constructorUUID = uuid;
          console.log(`‚úÖ [NEXUS] Constructor encontrado: ${constructorId} ‚Üí UUID: ${constructorUUID}`);
        } else {
          console.warn(`‚ö†Ô∏è [NEXUS] Constructor no encontrado: ${constructorId}`);
        }
      } catch (error) {
        console.error('‚ùå [NEXUS] Error buscando constructor:', error);
      }
    }

    // ========================================
    // ‚úÖ LOGGING DETALLADO DEL REQUEST
    // ========================================
    console.log('üîç [NEXUS API] Request recibido:', {
      messagePreview: latestUserMessage.substring(0, 50) + '...',
      sessionId: sessionId,
      fingerprint: fingerprint ? `${fingerprint.substring(0, 20)}...` : '‚ùå UNDEFINED',
      hasFingerprint: !!fingerprint,
      messageCount: messages.length
    });

    if (!fingerprint) {
      console.error('‚ùå [NEXUS API] CR√çTICO: Request sin fingerprint - Los datos personales NO se guardar√°n en BD');
      console.error('‚ùå [NEXUS API] Verificar que tracking.js se haya cargado antes de la conversaci√≥n');
    }

    // üîµ CONSULTAR DATOS YA GUARDADOS DEL PROSPECTO (para evitar re-pedir)
    let existingProspectData: any = {};
    if (fingerprint) {
      try {
        const { data: existingProspect } = await supabase
          .from('prospects')
          .select('device_info')
          .eq('fingerprint_id', fingerprint)
          .single();

        if (existingProspect?.device_info) {
          existingProspectData = existingProspect.device_info;
          console.log('üìä [NEXUS] Datos existentes del prospecto:', {
            tiene_nombre: !!existingProspectData.name,
            tiene_ocupacion: !!existingProspectData.occupation,
            tiene_whatsapp: !!existingProspectData.phone
          });
        }
      } catch (error) {
        // Si no existe, no pasa nada (primera interacci√≥n)
        console.log('‚ÑπÔ∏è [NEXUS] Primera interacci√≥n - sin datos previos');
      }
    }

    // FRAMEWORK IAA - CAPTURA INTELIGENTE (solo del mensaje actual)
    const prospectData = await captureProspectData(
      latestUserMessage,
      sessionId || 'anonymous',
      fingerprint,
      constructorUUID  // ‚úÖ Pasar UUID del constructor para tracking correcto
    );

    // COMBINAR datos existentes + nuevos capturados
    const mergedProspectData = {
      ...existingProspectData,
      ...prospectData // Los nuevos sobrescriben los viejos
    };

    // CONSULTA H√çBRIDA ESCALABLE
    const searchQuery = interpretQueryHibrido(latestUserMessage);
    console.log('Query h√≠brido generado:', searchQuery);

    const relevantDocuments = await consultarArsenalHibrido(searchQuery, latestUserMessage);
    console.log(`Arsenal h√≠brido: ${relevantDocuments.length} documentos encontrados`);

    // üîß CONSTRUCCI√ìN DE CONTEXTO MEJORADA - FIX APLICADO
    let context = '';
    const documentsUsed: string[] = [];
    let searchMethod = 'none';

    if (relevantDocuments.length > 0) {
      const doc = relevantDocuments[0];
      searchMethod = doc.search_method || 'unknown';

      context = 'ARSENAL CONVERSACIONAL MVP - CONTEXTO H√çBRIDO:\n\n';

      if (doc.search_method === 'catalogo_productos') {
        // üîß NUEVA INSTRUCCI√ìN ESPEC√çFICA PARA CAT√ÅLOGO - FIX APLICADO
        context += `[CAT√ÅLOGO DE PRODUCTOS GANO EXCEL - PRECIOS OFICIALES VERIFICADOS]
[M√âTODO: CONSULTA CAT√ÅLOGO ESPEC√çFICO]

‚ö†Ô∏è INSTRUCCI√ìN CR√çTICA: Usa EXACTAMENTE los precios que aparecen en este cat√°logo. No inventes precios ni uses informaci√≥n de otras fuentes.

${doc.title}:
${doc.content}

üî• RECORDATORIO IMPORTANTE: Los precios en este cat√°logo son la fuente de verdad absoluta para productos individuales.

`;
      } else {
        // L√≥gica arsenal original sin cambios
        const docType = doc.category?.replace('arsenal_', '').toUpperCase();
        const respuestas = doc.metadata?.respuestas_totales || 'N/A';
        const metodo = doc.search_method === 'hibrid_classification' ? 'CLASIFICACI√ìN AUTOM√ÅTICA' : 'B√öSQUEDA SEM√ÅNTICA';

        context += `[ARSENAL ${docType} - ${respuestas} respuestas] [M√âTODO: ${metodo}]\n${doc.title}:\n${doc.content}\n\n`;
      }

      context += '---\n\n';
      documentsUsed.push(doc.source || doc.category);
    }

    // Agregar contexto del prospecto (DATOS ACUMULADOS + NUEVOS)
    if (Object.keys(mergedProspectData).length > 0) {
      context += `INFORMACI√ìN DEL PROSPECTO CAPTURADA (Framework IAA):
- Nivel de inter√©s: ${mergedProspectData.interest_level || 'No determinado'}/10
- Momento √≥ptimo: ${mergedProspectData.momento_optimo || 'Por determinar'}
- Arquetipo: ${mergedProspectData.archetype || 'No identificado'}
${mergedProspectData.objections ? `- Objeciones: ${mergedProspectData.objections.join(', ')}` : ''}
${mergedProspectData.name ? `- Nombre: ${mergedProspectData.name}` : ''}
${mergedProspectData.occupation ? `- Ocupaci√≥n: ${mergedProspectData.occupation}` : ''}
${mergedProspectData.phone ? `- WhatsApp: ${mergedProspectData.phone}` : ''}

`;
      console.log('Contexto h√≠brido del prospecto incluido:', mergedProspectData.momento_optimo);
    }

    // ‚úÖ OPTIMIZACI√ìN: System prompt CON CACHE de Anthropic
    const baseSystemPrompt = await getSystemPrompt();

    // üéØ BLOQUE 1 - CACHEABLE: Arsenal/Cat√°logo Context
    const arsenalContext = context; // Ya contiene el contenido del arsenal o cat√°logo

    // üî• FASE 1.5 - BLOQUE FAQ: Preguntas m√°s frecuentes pre-cargadas (CACHEABLE)
    const topQueriesFAQ = `
## üî• PREGUNTAS M√ÅS FRECUENTES - RESPUESTAS OPTIMIZADAS

Estas son las preguntas con mayor frecuencia y conversi√≥n. Si el usuario pregunta sobre estos temas, usa EXACTAMENTE estas respuestas:

### FAQ_01: "¬øC√≥mo funciona el negocio?" (Flujo completo de 3 niveles)

**NIVEL 1 - LA VISI√ìN:**
Esa es la pregunta correcta, y la respuesta redefine el juego. Pi√©nsalo as√≠: Jeff Bezos no construy√≥ su fortuna vendiendo libros. Construy√≥ Amazon, el sistema.

Nosotros aplicamos esa misma filosof√≠a. Ayudamos a personas con mentalidad de constructor a crear su propio sistema de distribuci√≥n, por donde fluyen cientos de productos √∫nicos de Gano Excel y Gano Itouch todos los d√≠as.

**Preguntas de seguimiento sugeridas:**
‚û°Ô∏è ¬øQuieres saber c√≥mo lo hacemos posible?
‚öôÔ∏è ¬øQu√© es un "sistema de distribuci√≥n"?
üì¶ ¬øQu√© productos son?

**NIVEL 2 - LA ARQUITECTURA:**
Lo hacemos posible entreg√°ndote una arquitectura donde t√∫ te enfocas en el 20% del trabajo que es puramente estrat√©gico, mientras la maquinaria tecnol√≥gica de NodeX y NEXUS se encarga del 80% del trabajo pesado y operativo. Es un modelo de apalancamiento real.

**Preguntas de seguimiento sugeridas:**
‚û°Ô∏è Expl√≠came el 80% que hace la tecnolog√≠a
üß† ¬øCu√°l es mi 20% estrat√©gico?
üí° ¬øC√≥mo se ve eso en la pr√°ctica?

**NIVEL 3 - LA METODOLOG√çA:**
Tu 20% estrat√©gico se simplifica a nuestro Framework IAA:

**INICIAR:** Eres la chispa que conecta a las personas con el ecosistema.
**ACOGER:** Eres el consultor que aporta la confianza en el momento clave.
**ACTIVAR:** Eres el mentor que entrega la arquitectura a un nuevo constructor.

Dejas de ser el operador y te conviertes en el director de orquesta.

**Preguntas de seguimiento sugeridas:**
‚û°Ô∏è ¬øQu√© herramientas tengo para INICIAR?
ü§ù ¬øC√≥mo s√© cu√°ndo ACOGER?
üöÄ ¬øC√≥mo es el proceso de ACTIVAR?

---

### FAQ_02: "¬øC√≥mo se gana en el negocio?"

En nuestro ecosistema, no "ganas dinero", construyes flujos de valor. La arquitectura financiera recompensa la construcci√≥n de un activo real en tres fases:

**A Corto Plazo (Capitalizaci√≥n):** A trav√©s de los Bonos de Inicio R√°pido al activar a tus primeros constructores.

**A Mediano Plazo (Expansi√≥n):** Con las Comisiones de Equipo (Binario), participas del volumen total de productos que se mueven en tu canal.

**A Largo Plazo (Legado):** Desbloqueas los Bonos de Liderazgo y otros incentivos por desarrollar a otros arquitectos.

**Pregunta de seguimiento:** ¬øCu√°l de estas tres fases resuena m√°s con tu visi√≥n de construcci√≥n?

---

### FAQ_03: "¬øCu√°l es la inversi√≥n para empezar a construir?"

Esta no es una simple compra; es la elecci√≥n de tu **arquitectura de construcci√≥n inicial**. Hemos dise√±ado tres puntos de entrada, cada uno pensado para una visi√≥n y un nivel de apalancamiento diferente.

Como parte del selecto grupo de los **150 Fundadores**, cada paquete desbloquea meses de cortes√≠a de nuestra maquinaria tecnol√≥gica, un **Bono Tecnol√≥gico** exclusivo para los pioneros del ecosistema.

Aqu√≠ est√°n las tres arquitecturas iniciales:

* **Constructor Inicial ($200 USD / ~$900.000 COP):** El punto de partida inteligente para validar la arquitectura y el poder del ecosistema. Incluye **2 meses de cortes√≠a** de nuestra tecnolog√≠a.

* **Constructor Empresarial ($500 USD / ~$2.250.000 COP):** El equilibrio perfecto para una construcci√≥n s√≥lida y una operaci√≥n profesional desde el inicio. Incluye **4 meses de cortes√≠a** de nuestra tecnolog√≠a.

* **Constructor Visionario ($1,000 USD / ~$4.500.000 COP):** Dise√±ado para el m√°ximo apalancamiento y una construcci√≥n a gran escala desde el d√≠a uno. Incluye **6 meses de cortes√≠a** de nuestra tecnolog√≠a.

La √∫nica inversi√≥n recurrente es de 50 PV (aprox. $450,000 COP), que recibes √≠ntegramente en productos. No es un costo de plataforma, es el **combustible que mueve tu activo**.

**Pregunta de seguimiento:** ¬øCu√°l de estas arquitecturas iniciales resuena m√°s con tu visi√≥n de construcci√≥n?

---

### FAQ_04: "¬øQu√© hay que hacer?" / "¬øCu√°l es mi trabajo?"

Tu trabajo se transforma de operador a arquitecto estrat√©gico. Con el Framework IAA, te enfocas en tres acciones clave:

**INICIAR (La Chispa):**
- Conectas personas con el ecosistema usando herramientas automatizadas
- NodeX y NEXUS educan y cualifican por ti
- Tu rol: Ser el puente inicial

**ACOGER (El Consultor):**
- Aportas el toque humano cuando el sistema detecta el momento √≥ptimo
- Das confianza y validas el ajuste
- Tu rol: Consultor√≠a estrat√©gica (no ventas)

**ACTIVAR (El Mentor):**
- Entregas las llaves del ecosistema a nuevos constructores
- Ense√±as el primer paso y acompa√±as el arranque
- Tu rol: Mentor√≠a y transferencia de conocimiento

La tecnolog√≠a maneja el 80% operativo (seguimiento, educaci√≥n, contenido, an√°lisis). T√∫ manejas el 20% estrat√©gico (conexi√≥n humana, consultor√≠a, mentor√≠a).

**Pregunta de seguimiento:** ¬øCu√°l de estas tres acciones estrat√©gicas te parece m√°s natural para tu personalidad?

---

üéØ INSTRUCCI√ìN CR√çTICA: Si el usuario hace una pregunta que coincide con estas FAQ, usa EXACTAMENTE el contenido de arriba. Estas respuestas han sido optimizadas para m√°xima claridad y conversi√≥n.
`;

    // üéØ BLOQUE 3 - NO CACHEABLE: Instrucciones espec√≠ficas de la sesi√≥n
    // Calcular interacci√≥n actual (cada mensaje user + assistant = 1 interacci√≥n)
    const interaccionActual = Math.floor(messages.length / 2) + 1;

    // ‚úÖ NUEVA L√ìGICA: Es primera interacci√≥n SOLO si no hay datos previos con consentimiento
    const tieneConsentimientoPrevio = existingProspectData.consent_granted === true;
    const tieneNombrePrevio = !!existingProspectData.name;
    const esUsuarioConocido = tieneConsentimientoPrevio && tieneNombrePrevio;

    // Solo mostrar onboarding si es primera vez Y primera interacci√≥n de la sesi√≥n
    const esPrimeraInteraccion = interaccionActual === 1 && !esUsuarioConocido;

    // Logging para debug
    console.log('üéØ [NEXUS] Estado del usuario:', {
      interaccionActual,
      esUsuarioConocido,
      tieneConsentimientoPrevio,
      tieneNombrePrevio,
      esPrimeraInteraccion,
      nombre: existingProspectData.name || 'N/A'
    });

    const sessionInstructions = `
INSTRUCCIONES ARQUITECTURA H√çBRIDA:
- Usa la consulta sem√°ntica escalable implementada
- Arsenal MVP como fuente de verdad absoluta
- Clasificaci√≥n autom√°tica funcionando correctamente

üõí INSTRUCCIONES ESPEC√çFICAS PARA CAT√ÅLOGO DE PRODUCTOS:
${searchMethod === 'catalogo_productos'
  ? `- ‚úÖ CAT√ÅLOGO CARGADO: Usa √öNICAMENTE los precios exactos que aparecen en el contenido arriba
- NUNCA inventes precios ni uses informaci√≥n de otras fuentes
- Los precios del cat√°logo son la autoridad final para productos individuales
- Formato respuesta: "El [PRODUCTO] tiene un precio de $[PRECIO EXACTO] COP por [PRESENTACI√ìN]"`
  : `- ‚ö†Ô∏è CAT√ÅLOGO NO DISPONIBLE: Si te preguntan por precios de productos individuales, responde:
"En este momento no tengo acceso a los precios actualizados de productos individuales.

Para informaci√≥n precisa sobre precios y disponibilidad, te puedo conectar con **Liliana Moreno**, nuestra consultora senior.

üì± **WhatsApp:** +573102066593
üïê **Horario:** 8:00 AM - 8:00 PM (GMT-5)

Ella te brindar√° el cat√°logo completo actualizado y podr√° asesorarte personalmente."`
}

üíº INSTRUCCIONES PARA PAQUETES DE INVERSI√ìN:
- Si consultas arsenal: usar informaci√≥n de paquetes de inversi√≥n (Constructor Inicial, Empresarial, Visionario)
- Para paquetes usa los precios: $900,000 / $2,250,000 / $4,500,000 COP

‚ö° INSTRUCCIONES GENERALES:
- Si no hay informaci√≥n espec√≠fica: "Para esa consulta, te conectar√© con Liliana Moreno"
- Personalizaci√≥n adaptativa por arquetipo detectado
- CR√çTICO: Respuestas concisas + opciones para profundizar
- Eval√∫a escalaci√≥n inteligente si momento_optimo 'caliente'

üéØ ONBOARDING + CAPTURA DE DATOS - INSTRUCCI√ìN CR√çTICA v12.2:
${esUsuarioConocido ? `
üéâ USUARIO CONOCIDO - SALUDO PERSONALIZADO:
- El usuario YA dio consentimiento previamente
- Su nombre es: ${existingProspectData.name}
- NO vuelvas a pedir consentimiento ni datos que ya tienes
- SALUDO OBLIGATORIO: "¬°Hola de nuevo, ${existingProspectData.name}! ¬øEn qu√© puedo ayudarte hoy?"
- Si preguntan algo que ya respondiste antes, recu√©rdales: "Como te coment√© antes..."
- Mant√©n un tono familiar y cercano (ya se conocen)

üìä DATOS QUE YA TIENES:
- Nombre: ${existingProspectData.name || 'N/A'}
- Ocupaci√≥n: ${existingProspectData.occupation || 'N/A'}
- WhatsApp: ${existingProspectData.phone || 'N/A'}

‚ö†Ô∏è SOLO pide datos que A√öN NO TIENES (si faltan WhatsApp u ocupaci√≥n)
` : esPrimeraInteraccion ? `
‚ö†Ô∏è PRIMERA INTERACCI√ìN - ONBOARDING LEGAL OBLIGATORIO:

PROHIBICIONES CR√çTICAS:
‚ùå NO agregues saludos ("¬°Hola! Soy NEXUS..." o similares)
‚ùå NO agregues emojis (üöÄ, ‚úÖ, ‚ùå)
‚ùå NO agregues texto sobre "arquitecto tecnol√≥gico" o "comprar tu tiempo de vuelta"
‚ùå NO agregues frases como "Una vez que tengamos eso claro..."
‚ùå NO expandas ni interpretes el texto de consentimiento

INSTRUCCI√ìN:
- USA SOLO el texto de consentimiento del System Prompt (secci√≥n ONBOARDING MINIMALISTA)
- Esperar respuesta del usuario antes de continuar

- IMPORTANTE: El usuario pregunt√≥ "${latestUserMessage}"
- Pero NO respondas esa pregunta A√öN
- Primero completa el onboarding legal
- Al final del onboarding, puedes mencionar: "Ahora que tenemos eso claro, respondamos a tu pregunta..."
` : `
‚úÖ SEGUNDA INTERACCI√ìN EN ADELANTE - CAPTURA PROGRESIVA CON PROPUESTA DE VALOR:

üìä ESTADO ACTUAL DE CAPTURA (Datos acumulados en BD):
- Nombre: ${mergedProspectData.name || '‚ùå FALTA - PEDIR AHORA'}
- Ocupaci√≥n: ${mergedProspectData.occupation || '‚ùå FALTA'}
- WhatsApp: ${mergedProspectData.phone || '‚ùå FALTA'}

üéØ PR√ìXIMO DATO A CAPTURAR (si falta):

${!mergedProspectData.name ? `
‚ö†Ô∏è FALTA: NOMBRE
- Sigue las instrucciones del System Prompt (PASO 1) para timing y formato
` : mergedProspectData.name && !mergedProspectData.archetype ? `
‚ö†Ô∏è FALTA: ARQUETIPO
- Nombre ya capturado: ${mergedProspectData.name}
- Sigue las instrucciones del System Prompt (PASO 2) para presentar arquetipos
- Usa formato de vi√±etas: "- A) üíº Profesional..."
` : mergedProspectData.name && mergedProspectData.archetype && (mergedProspectData.interest_level || 0) >= 7 && !mergedProspectData.phone ? `
‚ö†Ô∏è FALTA: WHATSAPP (Inter√©s Alto: ${mergedProspectData.interest_level}/10)
- Nombre: ${mergedProspectData.name}
- Arquetipo: ${mergedProspectData.archetype}
- Sigue las instrucciones del System Prompt (PASO 3) para pedir WhatsApp
` : `
‚úÖ DATOS COMPLETOS
- Contin√∫a conversaci√≥n sin pedir m√°s datos
- Email solo si usuario solicita recurso digital
`}

‚ö†Ô∏è TIMING Y FORMATO - SEGUIR SYSTEM PROMPT v12.5:
- El System Prompt (PASO 1 y PASO 2) contiene las reglas de timing correctas
- Sigue esas instrucciones para timing de nombre y arquetipo
- NO impongas timing diferente a lo que dice el System Prompt
`}`;

    // üîç LOGGING DETALLADO PARA DEBUGGING
    console.log('üîç DEBUG - Contexto enviado a Claude:');
    console.log('M√©todo de b√∫squeda:', searchMethod);
    console.log('üì¶ CACHE STATUS: Usando Anthropic Prompt Caching (3 bloques + 1 din√°mico)');
    if (searchMethod === 'catalogo_productos') {
      console.log('üìã Contenido cat√°logo enviado (primeros 200 chars):',
        relevantDocuments[0]?.content?.substring(0, 200) + '...');
    }
    console.log('üìù System prompt base (primeros 100 chars):',
      baseSystemPrompt.substring(0, 100) + '...');
    console.log('üìù Arsenal context length:', arsenalContext.length, 'chars');
    console.log('üî• FAQ context length:', topQueriesFAQ.length, 'chars');

    console.log('Enviando request Claude con contexto h√≠brido + CACHE...');

    // ‚ö° FASE 1 - OPTIMIZACI√ìN: max_tokens din√°mico seg√∫n tipo de consulta
    // FIX 2025-10-25: Ajuste gradual para evitar respuestas cortadas (sincronizado con Dashboard)
    const maxTokens = searchMethod === 'catalogo_productos'
      ? 300  // Consultas de precios = respuestas cortas (producto + precio)
      : prospectData.momento_optimo === 'caliente'
      ? 500  // Prospecto caliente = respuesta m√°s detallada para cerrar
      : 600; // Default: incrementado de 500 ‚Üí 600 para arquetipos/paquetes completos

    console.log(`‚ö° max_tokens din√°mico: ${maxTokens} (${searchMethod}, momento: ${prospectData.momento_optimo || 'N/A'})`);

    // ‚ö° FASE 1 - OPTIMIZACI√ìN: Limitar historial a √∫ltimos 6 mensajes (3 intercambios)
    // Ahorra tokens en conversaciones largas manteniendo contexto suficiente
    const recentMessages = messages.length > 6 ? messages.slice(-6) : messages;
    console.log(`‚ö° Historial optimizado: ${recentMessages.length}/${messages.length} mensajes`);

    // ‚úÖ Generar respuesta con Claude usando Prompt Caching + Optimizaciones FASE 1 + FASE 1.5
    const response = await anthropic.messages.create({
      model: 'claude-sonnet-4-20250514',
      system: [
        // üéØ BLOQUE 1: Base System Prompt (CACHEABLE - ~15K chars)
        {
          type: 'text',
          text: baseSystemPrompt,
          cache_control: { type: 'ephemeral' }
        },
        // üéØ BLOQUE 2: Arsenal/Cat√°logo Context (CACHEABLE - ~2-8K chars)
        {
          type: 'text',
          text: arsenalContext,
          cache_control: { type: 'ephemeral' }
        },
        // üî• BLOQUE 3: FAQ Top Queries (CACHEABLE - ~4K chars) - FASE 1.5
        {
          type: 'text',
          text: topQueriesFAQ,
          cache_control: { type: 'ephemeral' }
        },
        // üìù BLOQUE 4: Session Instructions (NO CACHEABLE - siempre cambia)
        {
          type: 'text',
          text: sessionInstructions
        }
      ],
      stream: true,
      max_tokens: maxTokens,        // ‚ö° OPTIMIZADO: din√°mico 300-500 (antes: 1000)
      temperature: 0.3,
      top_p: 0.9,                    // ‚ö° NUEVO: consistencia mejorada
      messages: recentMessages,      // ‚ö° OPTIMIZADO: √∫ltimos 6 mensajes (antes: todos)
    });

    // Stream optimizado para arquitectura h√≠brida
    const stream = AnthropicStream(response as any, {
      onFinal: async (completion) => {
        const totalTime = Date.now() - startTime;
        console.log(`‚úÖ NEXUS h√≠brido completado en ${totalTime}ms - M√©todo: ${searchMethod}`);

        // ‚úÖ EXTRACCI√ìN SEM√ÅNTICA: Analizar respuesta de Claude para capturar datos
        const semanticData = extractFromClaudeResponse(completion);

        // Merge datos: captura directa (del usuario) + sem√°ntica (de respuesta Claude)
        const finalData: ProspectData = {
          ...prospectData,  // Datos capturados del input del usuario
          ...semanticData   // Datos extra√≠dos de la respuesta de Claude (prioridad)
        };

        // Guardar datos sem√°nticos si se encontr√≥ algo
        if (Object.keys(semanticData).length > 0 && fingerprint) {
          console.log('üîç [SEM√ÅNTICA] Guardando datos extra√≠dos de respuesta Claude:', semanticData);

          try {
            const cleanedSemanticData = removeNullValues(semanticData);

            const { data: rpcResult, error: rpcError } = await supabase.rpc('update_prospect_data', {
              p_fingerprint_id: fingerprint,
              p_data: cleanedSemanticData,
              p_constructor_id: constructorUUID || undefined
            });

            if (rpcError) {
              console.error('‚ùå [SEM√ÅNTICA] Error guardando datos sem√°nticos:', rpcError);
            } else {
              console.log('‚úÖ [SEM√ÅNTICA] Datos sem√°nticos guardados exitosamente:', rpcResult);
            }
          } catch (error) {
            console.error('‚ùå [SEM√ÅNTICA] Exception guardando datos sem√°nticos:', error);
          }
        }

        // Log conversaci√≥n con datos finales completos
        await logConversationHibrida(
          latestUserMessage,
          completion,
          documentsUsed,
          searchMethod,
          sessionId,
          fingerprint,
          finalData  // ‚úÖ Incluir datos sem√°nticos en el log
        );
      }
    });

    return new StreamingTextResponse(stream);

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`Error NEXUS h√≠brido despu√©s de ${totalTime}ms:`, error);

    const fallbackResponse = `Experimentamos alta demanda. Arquitectura h√≠brida activando contacto directo.

**Contacto inmediato disponible:**
Liliana Moreno - Consultora Senior
WhatsApp: +573102066593
Horario: 8:00 AM - 8:00 PM (GMT-5)

Informaci√≥n disponible:
- Arquitectura CreaTuActivo.com completa
- Paquetes y opciones personalizadas
- Proceso de activaci√≥n paso a paso
- Consultor√≠a estrat√©gica completa`;

    return new Response(JSON.stringify({
      error: fallbackResponse
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Health check h√≠brido
export async function GET() {
  try {
    // Verificar Arsenal MVP completo
    const { data: arsenalDocs, error: arsenalError } = await supabase
      .from('nexus_documents')
      .select('category, metadata')
      .in('category', ['arsenal_inicial', 'arsenal_manejo', 'arsenal_cierre']);

    if (arsenalError) throw arsenalError;

    const arsenalInfo = arsenalDocs?.map(doc => ({
      type: doc.category,
      respuestas: doc.metadata?.respuestas_totales || 0
    })) || [];

    const totalRespuestas = arsenalInfo.reduce((sum, doc) => sum + (doc.respuestas || 0), 0);

    // Verificar system prompt h√≠brido
    const { data: promptData } = await supabase
      .from('system_prompts')
      .select('version, metadata')
      .eq('name', 'nexus_main')
      .single();

    // Verificar cat√°logo de productos
    const { data: catalogoData } = await supabase
      .from('nexus_documents')
      .select('id, title')
      .eq('id', 8)
      .single();

    // Verificar funciones RPC disponibles
    const { data: rpcFunctions } = await supabase.rpc('search_nexus_documents', {
      search_query: 'test',
      match_count: 1
    });

    return new Response(JSON.stringify({
      status: 'healthy',
      version: API_VERSION,
      system_prompt_version: promptData?.version || 'unknown',
      arquitectura: 'h√≠brida escalable + cat√°logo fix',
      arsenal_mvp: {
        documentos: arsenalInfo,
        total_respuestas: totalRespuestas,
        esperado: 79,
        status: totalRespuestas === 79 ? 'completo' : 'incompleto',
        escalabilidad: 'infinita'
      },
      catalogo_productos: {
        id: catalogoData?.id || null,
        title: catalogoData?.title || null,
        status: catalogoData ? 'disponible' : 'no encontrado'
      },
      funciones_rpc: {
        search_nexus_documents: rpcFunctions !== null ? 'disponible' : 'error',
        update_prospect_data: 'disponible'
      },
      fix_aplicado: {
        instrucciones_catalogo: 'espec√≠ficas y enf√°ticas',
        logging_detallado: 'habilitado',
        separacion_productos_paquetes: 'clara',
        fecha_aplicacion: '2025-09-01'
      },
      cache_hibrido: searchCache.size,
      timestamp: new Date().toISOString()
    }), {
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    return new Response(JSON.stringify({
      status: 'unhealthy',
      version: API_VERSION,
      arquitectura: 'h√≠brida + cat√°logo fix',
      error: error instanceof Error ? error.message : String(error)
    }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
